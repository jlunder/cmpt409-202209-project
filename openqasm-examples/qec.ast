Node
  { tag = Program {openqasmMajorVersion = 3, openqasmMinorVersion = Nothing, versionTok = EofToken},
    children =
      [ Node {tag = Statement, children = [Node {tag = IncludeStmt {includePath = "stdgates.inc", includeTok = StringLiteralToken "\"stdgates.inc\""}, children = [], context = ()}], context = ()},
        Node {tag = Statement, children = [Node {tag = QuantumDeclStmt, children = [Node {tag = QubitTypeSpec, children = [Node {tag = IntegerLiteral {integerVal = 3, integerTok = DecimalIntegerLiteralToken "3"}, children = [], context = ()}], context = ()}, Node {tag = Identifier {identifierName = "q", identifierTok = IdentifierToken "q"}, children = [], context = ()}], context = ()}], context = ()},
        Node {tag = Statement, children = [Node {tag = QuantumDeclStmt, children = [Node {tag = QubitTypeSpec, children = [Node {tag = IntegerLiteral {integerVal = 2, integerTok = DecimalIntegerLiteralToken "2"}, children = [], context = ()}], context = ()}, Node {tag = Identifier {identifierName = "a", identifierTok = IdentifierToken "a"}, children = [], context = ()}], context = ()}], context = ()},
        Node {tag = Statement, children = [Node {tag = ClassicalDeclStmt, children = [Node {tag = BitTypeSpec, children = [Node {tag = IntegerLiteral {integerVal = 3, integerTok = DecimalIntegerLiteralToken "3"}, children = [], context = ()}], context = ()}, Node {tag = Identifier {identifierName = "c", identifierTok = IdentifierToken "c"}, children = [], context = ()}, NilNode], context = ()}], context = ()},
        Node {tag = Statement, children = [Node {tag = ClassicalDeclStmt, children = [Node {tag = BitTypeSpec, children = [Node {tag = IntegerLiteral {integerVal = 2, integerTok = DecimalIntegerLiteralToken "2"}, children = [], context = ()}], context = ()}, Node {tag = Identifier {identifierName = "syn", identifierTok = IdentifierToken "syn"}, children = [], context = ()}, NilNode], context = ()}], context = ()},
        Node
          { tag = Statement,
            children =
              [ Node
                  { tag = DefStmt,
                    children =
                      [ Node {tag = Identifier {identifierName = "syndrome", identifierTok = IdentifierToken "syndrome"}, children = [], context = ()},
                        Node {tag = List, children = [Node {tag = ArgumentDefinition, children = [Node {tag = QubitTypeSpec, children = [Node {tag = IntegerLiteral {integerVal = 3, integerTok = DecimalIntegerLiteralToken "3"}, children = [], context = ()}], context = ()}, Node {tag = Identifier {identifierName = "d", identifierTok = IdentifierToken "d"}, children = [], context = ()}], context = ()}, Node {tag = ArgumentDefinition, children = [Node {tag = QubitTypeSpec, children = [Node {tag = IntegerLiteral {integerVal = 2, integerTok = DecimalIntegerLiteralToken "2"}, children = [], context = ()}], context = ()}, Node {tag = Identifier {identifierName = "a", identifierTok = IdentifierToken "a"}, children = [], context = ()}], context = ()}], context = ()},
                        Node {tag = BitTypeSpec, children = [Node {tag = IntegerLiteral {integerVal = 2, integerTok = DecimalIntegerLiteralToken "2"}, children = [], context = ()}], context = ()},
                        Node
                          { tag = Scope,
                            children =
                              [ Node {tag = Statement, children = [Node {tag = ClassicalDeclStmt, children = [Node {tag = BitTypeSpec, children = [Node {tag = IntegerLiteral {integerVal = 2, integerTok = DecimalIntegerLiteralToken "2"}, children = [], context = ()}], context = ()}, Node {tag = Identifier {identifierName = "b", identifierTok = IdentifierToken "b"}, children = [], context = ()}, NilNode], context = ()}], context = ()},
                                Node {tag = Statement, children = [Node {tag = GateCallStmt, children = [NilNode, Node {tag = Identifier {identifierName = "cx", identifierTok = IdentifierToken "cx"}, children = [], context = ()}, NilNode, NilNode, Node {tag = List, children = [Node {tag = IndexExpr, children = [Node {tag = Identifier {identifierName = "d", identifierTok = IdentifierToken "d"}, children = [], context = ()}, Node {tag = List, children = [Node {tag = IntegerLiteral {integerVal = 0, integerTok = DecimalIntegerLiteralToken "0"}, children = [], context = ()}], context = ()}], context = ()}, Node {tag = IndexExpr, children = [Node {tag = Identifier {identifierName = "a", identifierTok = IdentifierToken "a"}, children = [], context = ()}, Node {tag = List, children = [Node {tag = IntegerLiteral {integerVal = 0, integerTok = DecimalIntegerLiteralToken "0"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}], context = ()},
                                Node {tag = Statement, children = [Node {tag = GateCallStmt, children = [NilNode, Node {tag = Identifier {identifierName = "cx", identifierTok = IdentifierToken "cx"}, children = [], context = ()}, NilNode, NilNode, Node {tag = List, children = [Node {tag = IndexExpr, children = [Node {tag = Identifier {identifierName = "d", identifierTok = IdentifierToken "d"}, children = [], context = ()}, Node {tag = List, children = [Node {tag = IntegerLiteral {integerVal = 1, integerTok = DecimalIntegerLiteralToken "1"}, children = [], context = ()}], context = ()}], context = ()}, Node {tag = IndexExpr, children = [Node {tag = Identifier {identifierName = "a", identifierTok = IdentifierToken "a"}, children = [], context = ()}, Node {tag = List, children = [Node {tag = IntegerLiteral {integerVal = 0, integerTok = DecimalIntegerLiteralToken "0"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}], context = ()},
                                Node {tag = Statement, children = [Node {tag = GateCallStmt, children = [NilNode, Node {tag = Identifier {identifierName = "cx", identifierTok = IdentifierToken "cx"}, children = [], context = ()}, NilNode, NilNode, Node {tag = List, children = [Node {tag = IndexExpr, children = [Node {tag = Identifier {identifierName = "d", identifierTok = IdentifierToken "d"}, children = [], context = ()}, Node {tag = List, children = [Node {tag = IntegerLiteral {integerVal = 1, integerTok = DecimalIntegerLiteralToken "1"}, children = [], context = ()}], context = ()}], context = ()}, Node {tag = IndexExpr, children = [Node {tag = Identifier {identifierName = "a", identifierTok = IdentifierToken "a"}, children = [], context = ()}, Node {tag = List, children = [Node {tag = IntegerLiteral {integerVal = 1, integerTok = DecimalIntegerLiteralToken "1"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}], context = ()},
                                Node {tag = Statement, children = [Node {tag = GateCallStmt, children = [NilNode, Node {tag = Identifier {identifierName = "cx", identifierTok = IdentifierToken "cx"}, children = [], context = ()}, NilNode, NilNode, Node {tag = List, children = [Node {tag = IndexExpr, children = [Node {tag = Identifier {identifierName = "d", identifierTok = IdentifierToken "d"}, children = [], context = ()}, Node {tag = List, children = [Node {tag = IntegerLiteral {integerVal = 2, integerTok = DecimalIntegerLiteralToken "2"}, children = [], context = ()}], context = ()}], context = ()}, Node {tag = IndexExpr, children = [Node {tag = Identifier {identifierName = "a", identifierTok = IdentifierToken "a"}, children = [], context = ()}, Node {tag = List, children = [Node {tag = IntegerLiteral {integerVal = 1, integerTok = DecimalIntegerLiteralToken "1"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}], context = ()},
                                Node {tag = Statement, children = [Node {tag = MeasureArrowAssignmentStmt, children = [Node {tag = MeasureExpr, children = [Node {tag = Identifier {identifierName = "a", identifierTok = IdentifierToken "a"}, children = [], context = ()}], context = ()}, Node {tag = Identifier {identifierName = "b", identifierTok = IdentifierToken "b"}, children = [], context = ()}], context = ()}], context = ()},
                                Node {tag = Statement, children = [Node {tag = ReturnStmt, children = [Node {tag = Identifier {identifierName = "b", identifierTok = IdentifierToken "b"}, children = [], context = ()}], context = ()}], context = ()}
                              ],
                            context = ()
                          }
                      ],
                    context = ()
                  }
              ],
            context = ()
          },
        Node {tag = Statement, children = [Node {tag = ResetStmt, children = [Node {tag = Identifier {identifierName = "q", identifierTok = IdentifierToken "q"}, children = [], context = ()}], context = ()}], context = ()},
        Node {tag = Statement, children = [Node {tag = ResetStmt, children = [Node {tag = Identifier {identifierName = "a", identifierTok = IdentifierToken "a"}, children = [], context = ()}], context = ()}], context = ()},
        Node {tag = Statement, children = [Node {tag = GateCallStmt, children = [NilNode, Node {tag = Identifier {identifierName = "x", identifierTok = IdentifierToken "x"}, children = [], context = ()}, NilNode, NilNode, Node {tag = List, children = [Node {tag = IndexExpr, children = [Node {tag = Identifier {identifierName = "q", identifierTok = IdentifierToken "q"}, children = [], context = ()}, Node {tag = List, children = [Node {tag = IntegerLiteral {integerVal = 0, integerTok = DecimalIntegerLiteralToken "0"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}], context = ()},
        Node {tag = Statement, children = [Node {tag = BarrierStmt, children = [Node {tag = Identifier {identifierName = "q", identifierTok = IdentifierToken "q"}, children = [], context = ()}], context = ()}], context = ()},
        Node {tag = Statement, children = [Node {tag = AssignmentStmt {assignmentOpTok = EqualsToken}, children = [Node {tag = Identifier {identifierName = "syn", identifierTok = IdentifierToken "syn"}, children = [], context = ()}, Node {tag = CallExpr, children = [Node {tag = Identifier {identifierName = "syndrome", identifierTok = IdentifierToken "syndrome"}, children = [], context = ()}, Node {tag = List, children = [Node {tag = Identifier {identifierName = "q", identifierTok = IdentifierToken "q"}, children = [], context = ()}, Node {tag = Identifier {identifierName = "a", identifierTok = IdentifierToken "a"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}], context = ()},
        Node {tag = Statement, children = [Node {tag = IfStmt, children = [Node {tag = BinaryOperatorExpr {binaryOp = DoubleEqualsToken}, children = [Node {tag = CastExpr, children = [Node {tag = IntTypeSpec, children = [Node {tag = IntegerLiteral {integerVal = 2, integerTok = DecimalIntegerLiteralToken "2"}, children = [], context = ()}], context = ()}, Node {tag = Identifier {identifierName = "syn", identifierTok = IdentifierToken "syn"}, children = [], context = ()}], context = ()}, Node {tag = IntegerLiteral {integerVal = 1, integerTok = DecimalIntegerLiteralToken "1"}, children = [], context = ()}], context = ()}, Node {tag = Statement, children = [Node {tag = GateCallStmt, children = [NilNode, Node {tag = Identifier {identifierName = "x", identifierTok = IdentifierToken "x"}, children = [], context = ()}, NilNode, NilNode, Node {tag = List, children = [Node {tag = IndexExpr, children = [Node {tag = Identifier {identifierName = "q", identifierTok = IdentifierToken "q"}, children = [], context = ()}, Node {tag = List, children = [Node {tag = IntegerLiteral {integerVal = 0, integerTok = DecimalIntegerLiteralToken "0"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}, NilNode], context = ()}], context = ()},
        Node {tag = Statement, children = [Node {tag = IfStmt, children = [Node {tag = BinaryOperatorExpr {binaryOp = DoubleEqualsToken}, children = [Node {tag = CastExpr, children = [Node {tag = IntTypeSpec, children = [Node {tag = IntegerLiteral {integerVal = 2, integerTok = DecimalIntegerLiteralToken "2"}, children = [], context = ()}], context = ()}, Node {tag = Identifier {identifierName = "syn", identifierTok = IdentifierToken "syn"}, children = [], context = ()}], context = ()}, Node {tag = IntegerLiteral {integerVal = 2, integerTok = DecimalIntegerLiteralToken "2"}, children = [], context = ()}], context = ()}, Node {tag = Statement, children = [Node {tag = GateCallStmt, children = [NilNode, Node {tag = Identifier {identifierName = "x", identifierTok = IdentifierToken "x"}, children = [], context = ()}, NilNode, NilNode, Node {tag = List, children = [Node {tag = IndexExpr, children = [Node {tag = Identifier {identifierName = "q", identifierTok = IdentifierToken "q"}, children = [], context = ()}, Node {tag = List, children = [Node {tag = IntegerLiteral {integerVal = 2, integerTok = DecimalIntegerLiteralToken "2"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}, NilNode], context = ()}], context = ()},
        Node {tag = Statement, children = [Node {tag = IfStmt, children = [Node {tag = BinaryOperatorExpr {binaryOp = DoubleEqualsToken}, children = [Node {tag = CastExpr, children = [Node {tag = IntTypeSpec, children = [Node {tag = IntegerLiteral {integerVal = 2, integerTok = DecimalIntegerLiteralToken "2"}, children = [], context = ()}], context = ()}, Node {tag = Identifier {identifierName = "syn", identifierTok = IdentifierToken "syn"}, children = [], context = ()}], context = ()}, Node {tag = IntegerLiteral {integerVal = 3, integerTok = DecimalIntegerLiteralToken "3"}, children = [], context = ()}], context = ()}, Node {tag = Statement, children = [Node {tag = GateCallStmt, children = [NilNode, Node {tag = Identifier {identifierName = "x", identifierTok = IdentifierToken "x"}, children = [], context = ()}, NilNode, NilNode, Node {tag = List, children = [Node {tag = IndexExpr, children = [Node {tag = Identifier {identifierName = "q", identifierTok = IdentifierToken "q"}, children = [], context = ()}, Node {tag = List, children = [Node {tag = IntegerLiteral {integerVal = 1, integerTok = DecimalIntegerLiteralToken "1"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}, NilNode], context = ()}], context = ()},
        Node {tag = Statement, children = [Node {tag = AssignmentStmt {assignmentOpTok = EqualsToken}, children = [Node {tag = Identifier {identifierName = "c", identifierTok = IdentifierToken "c"}, children = [], context = ()}, Node {tag = MeasureExpr, children = [Node {tag = Identifier {identifierName = "q", identifierTok = IdentifierToken "q"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}
      ],
    context = ()
  }
