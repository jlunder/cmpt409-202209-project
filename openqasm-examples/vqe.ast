Node
  { tag = Program {openqasmMajorVersion = 3, openqasmMinorVersion = Nothing, versionTok = EofToken},
    children =
      [ Node {tag = Statement, children = [Node {tag = IncludeStmt {includePath = "stdgates.inc", includeTok = StringLiteralToken "\"stdgates.inc\""}, children = [], context = ()}], context = ()},
        Node {tag = Statement, children = [Node {tag = ConstDeclStmt, children = [Node {tag = IntTypeSpec, children = [Node {tag = IntegerLiteral {integerVal = 32, integerTok = DecimalIntegerLiteralToken "32"}, children = [], context = ()}], context = ()}, Node {tag = Identifier {identifierName = "n", identifierTok = IdentifierToken "n"}, children = [], context = ()}, Node {tag = IntegerLiteral {integerVal = 10, integerTok = DecimalIntegerLiteralToken "10"}, children = [], context = ()}], context = ()}], context = ()},
        Node {tag = Statement, children = [Node {tag = ConstDeclStmt, children = [Node {tag = IntTypeSpec, children = [Node {tag = IntegerLiteral {integerVal = 32, integerTok = DecimalIntegerLiteralToken "32"}, children = [], context = ()}], context = ()}, Node {tag = Identifier {identifierName = "layers", identifierTok = IdentifierToken "layers"}, children = [], context = ()}, Node {tag = IntegerLiteral {integerVal = 3, integerTok = DecimalIntegerLiteralToken "3"}, children = [], context = ()}], context = ()}], context = ()},
        Node {tag = Statement, children = [Node {tag = ConstDeclStmt, children = [Node {tag = IntTypeSpec, children = [Node {tag = IntegerLiteral {integerVal = 32, integerTok = DecimalIntegerLiteralToken "32"}, children = [], context = ()}], context = ()}, Node {tag = Identifier {identifierName = "prec", identifierTok = IdentifierToken "prec"}, children = [], context = ()}, Node {tag = IntegerLiteral {integerVal = 16, integerTok = DecimalIntegerLiteralToken "16"}, children = [], context = ()}], context = ()}], context = ()},
        Node {tag = Statement, children = [Node {tag = ConstDeclStmt, children = [Node {tag = IntTypeSpec, children = [Node {tag = IntegerLiteral {integerVal = 32, integerTok = DecimalIntegerLiteralToken "32"}, children = [], context = ()}], context = ()}, Node {tag = Identifier {identifierName = "shots", identifierTok = IdentifierToken "shots"}, children = [], context = ()}, Node {tag = IntegerLiteral {integerVal = 1000, integerTok = DecimalIntegerLiteralToken "1000"}, children = [], context = ()}], context = ()}], context = ()},
        Node {tag = Statement, children = [Node {tag = ExternStmt, children = [Node {tag = Identifier {identifierName = "get_parameter", identifierTok = IdentifierToken "get_parameter"}, children = [], context = ()}, Node {tag = List, children = [Node {tag = UintTypeSpec, children = [Node {tag = Identifier {identifierName = "prec", identifierTok = IdentifierToken "prec"}, children = [], context = ()}], context = ()}, Node {tag = UintTypeSpec, children = [Node {tag = Identifier {identifierName = "prec", identifierTok = IdentifierToken "prec"}, children = [], context = ()}], context = ()}], context = ()}, Node {tag = AngleTypeSpec, children = [Node {tag = Identifier {identifierName = "prec", identifierTok = IdentifierToken "prec"}, children = [], context = ()}], context = ()}], context = ()}], context = ()},
        Node {tag = Statement, children = [Node {tag = ExternStmt, children = [Node {tag = Identifier {identifierName = "get_npaulis", identifierTok = IdentifierToken "get_npaulis"}, children = [], context = ()}, Node {tag = List, children = [], context = ()}, Node {tag = UintTypeSpec, children = [Node {tag = Identifier {identifierName = "prec", identifierTok = IdentifierToken "prec"}, children = [], context = ()}], context = ()}], context = ()}], context = ()},
        Node {tag = Statement, children = [Node {tag = ExternStmt, children = [Node {tag = Identifier {identifierName = "get_pauli", identifierTok = IdentifierToken "get_pauli"}, children = [], context = ()}, Node {tag = List, children = [Node {tag = IntTypeSpec, children = [Node {tag = Identifier {identifierName = "prec", identifierTok = IdentifierToken "prec"}, children = [], context = ()}], context = ()}], context = ()}, Node {tag = BitTypeSpec, children = [Node {tag = BinaryOperatorExpr {binaryOp = AsteriskToken}, children = [Node {tag = IntegerLiteral {integerVal = 2, integerTok = DecimalIntegerLiteralToken "2"}, children = [], context = ()}, Node {tag = Identifier {identifierName = "n", identifierTok = IdentifierToken "n"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}], context = ()},
        Node {tag = Statement, children = [Node {tag = ExternStmt, children = [Node {tag = Identifier {identifierName = "update_energy", identifierTok = IdentifierToken "update_energy"}, children = [], context = ()}, Node {tag = List, children = [Node {tag = IntTypeSpec, children = [Node {tag = Identifier {identifierName = "prec", identifierTok = IdentifierToken "prec"}, children = [], context = ()}], context = ()}, Node {tag = UintTypeSpec, children = [Node {tag = Identifier {identifierName = "prec", identifierTok = IdentifierToken "prec"}, children = [], context = ()}], context = ()}, Node {tag = FloatTypeSpec, children = [Node {tag = Identifier {identifierName = "prec", identifierTok = IdentifierToken "prec"}, children = [], context = ()}], context = ()}], context = ()}, Node {tag = FloatTypeSpec, children = [Node {tag = Identifier {identifierName = "prec", identifierTok = IdentifierToken "prec"}, children = [], context = ()}], context = ()}], context = ()}], context = ()},
        Node
          { tag = Statement,
            children =
              [ Node
                  { tag = GateStmt,
                    children =
                      [ Node {tag = Identifier {identifierName = "entangler", identifierTok = IdentifierToken "entangler"}, children = [], context = ()},
                        NilNode,
                        Node {tag = List, children = [Node {tag = Identifier {identifierName = "q", identifierTok = IdentifierToken "q"}, children = [], context = ()}], context = ()},
                        Node
                          { tag = Scope,
                            children =
                              [ Node
                                  { tag = Statement,
                                    children =
                                      [ Node
                                          { tag = ForStmt,
                                            children =
                                              [ Node {tag = UintTypeSpec, children = [NilNode], context = ()},
                                                Node {tag = Identifier {identifierName = "i", identifierTok = IdentifierToken "i"}, children = [], context = ()},
                                                Node {tag = RangeInitExpr, children = [Node {tag = IntegerLiteral {integerVal = 0, integerTok = DecimalIntegerLiteralToken "0"}, children = [], context = ()}, NilNode, Node {tag = BinaryOperatorExpr {binaryOp = MinusToken}, children = [Node {tag = Identifier {identifierName = "n", identifierTok = IdentifierToken "n"}, children = [], context = ()}, Node {tag = IntegerLiteral {integerVal = 2, integerTok = DecimalIntegerLiteralToken "2"}, children = [], context = ()}], context = ()}], context = ()},
                                                Node
                                                  { tag = Scope,
                                                    children =
                                                      [ Node {tag = Statement, children = [Node {tag = GateCallStmt, children = [NilNode, Node {tag = Identifier {identifierName = "cx", identifierTok = IdentifierToken "cx"}, children = [], context = ()}, NilNode, NilNode, Node {tag = List, children = [Node {tag = IndexedIdentifier, children = [Node {tag = Identifier {identifierName = "q", identifierTok = IdentifierToken "q"}, children = [], context = ()}, Node {tag = List, children = [Node {tag = Identifier {identifierName = "i", identifierTok = IdentifierToken "i"}, children = [], context = ()}], context = ()}], context = ()}, Node {tag = IndexedIdentifier, children = [Node {tag = Identifier {identifierName = "q", identifierTok = IdentifierToken "q"}, children = [], context = ()}, Node {tag = List, children = [Node {tag = BinaryOperatorExpr {binaryOp = PlusToken}, children = [Node {tag = Identifier {identifierName = "i", identifierTok = IdentifierToken "i"}, children = [], context = ()}, Node {tag = IntegerLiteral {integerVal = 1, integerTok = DecimalIntegerLiteralToken "1"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}
                                                      ],
                                                    context = ()
                                                  }
                                              ],
                                            context = ()
                                          }
                                      ],
                                    context = ()
                                  }
                              ],
                            context = ()
                          }
                      ],
                    context = ()
                  }
              ],
            context = ()
          },
        Node
          { tag = Statement,
            children =
              [ Node
                  { tag = DefStmt,
                    children =
                      [ Node {tag = Identifier {identifierName = "xmeasure", identifierTok = IdentifierToken "xmeasure"}, children = [], context = ()},
                        Node {tag = List, children = [Node {tag = ArgumentDefinition, children = [Node {tag = QubitTypeSpec, children = [NilNode], context = ()}, Node {tag = Identifier {identifierName = "q", identifierTok = IdentifierToken "q"}, children = [], context = ()}], context = ()}], context = ()},
                        Node {tag = BitTypeSpec, children = [NilNode], context = ()},
                        Node
                          { tag = Scope,
                            children =
                              [ Node {tag = Statement, children = [Node {tag = GateCallStmt, children = [NilNode, Node {tag = Identifier {identifierName = "h", identifierTok = IdentifierToken "h"}, children = [], context = ()}, NilNode, NilNode, Node {tag = List, children = [Node {tag = Identifier {identifierName = "q", identifierTok = IdentifierToken "q"}, children = [], context = ()}], context = ()}], context = ()}], context = ()},
                                Node {tag = Statement, children = [Node {tag = ReturnStmt, children = [Node {tag = MeasureExpr, children = [Node {tag = Identifier {identifierName = "q", identifierTok = IdentifierToken "q"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}
                              ],
                            context = ()
                          }
                      ],
                    context = ()
                  }
              ],
            context = ()
          },
        Node
          { tag = Statement,
            children =
              [ Node
                  { tag = DefStmt,
                    children =
                      [ Node {tag = Identifier {identifierName = "ymeasure", identifierTok = IdentifierToken "ymeasure"}, children = [], context = ()},
                        Node {tag = List, children = [Node {tag = ArgumentDefinition, children = [Node {tag = QubitTypeSpec, children = [NilNode], context = ()}, Node {tag = Identifier {identifierName = "q", identifierTok = IdentifierToken "q"}, children = [], context = ()}], context = ()}], context = ()},
                        Node {tag = BitTypeSpec, children = [NilNode], context = ()},
                        Node
                          { tag = Scope,
                            children =
                              [ Node {tag = Statement, children = [Node {tag = GateCallStmt, children = [NilNode, Node {tag = Identifier {identifierName = "s", identifierTok = IdentifierToken "s"}, children = [], context = ()}, NilNode, NilNode, Node {tag = List, children = [Node {tag = Identifier {identifierName = "q", identifierTok = IdentifierToken "q"}, children = [], context = ()}], context = ()}], context = ()}], context = ()},
                                Node {tag = Statement, children = [Node {tag = GateCallStmt, children = [NilNode, Node {tag = Identifier {identifierName = "h", identifierTok = IdentifierToken "h"}, children = [], context = ()}, NilNode, NilNode, Node {tag = List, children = [Node {tag = Identifier {identifierName = "q", identifierTok = IdentifierToken "q"}, children = [], context = ()}], context = ()}], context = ()}], context = ()},
                                Node {tag = Statement, children = [Node {tag = ReturnStmt, children = [Node {tag = MeasureExpr, children = [Node {tag = Identifier {identifierName = "q", identifierTok = IdentifierToken "q"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}
                              ],
                            context = ()
                          }
                      ],
                    context = ()
                  }
              ],
            context = ()
          },
        Node
          { tag = Statement,
            children =
              [ Node
                  { tag = DefStmt,
                    children =
                      [ Node {tag = Identifier {identifierName = "pauli_measurement", identifierTok = IdentifierToken "pauli_measurement"}, children = [], context = ()},
                        Node {tag = List, children = [Node {tag = ArgumentDefinition, children = [Node {tag = BitTypeSpec, children = [Node {tag = BinaryOperatorExpr {binaryOp = AsteriskToken}, children = [Node {tag = IntegerLiteral {integerVal = 2, integerTok = DecimalIntegerLiteralToken "2"}, children = [], context = ()}, Node {tag = Identifier {identifierName = "n", identifierTok = IdentifierToken "n"}, children = [], context = ()}], context = ()}], context = ()}, Node {tag = Identifier {identifierName = "spec", identifierTok = IdentifierToken "spec"}, children = [], context = ()}], context = ()}, Node {tag = ArgumentDefinition, children = [Node {tag = QubitTypeSpec, children = [Node {tag = Identifier {identifierName = "n", identifierTok = IdentifierToken "n"}, children = [], context = ()}], context = ()}, Node {tag = Identifier {identifierName = "q", identifierTok = IdentifierToken "q"}, children = [], context = ()}], context = ()}], context = ()},
                        Node {tag = BitTypeSpec, children = [NilNode], context = ()},
                        Node
                          { tag = Scope,
                            children =
                              [ Node {tag = Statement, children = [Node {tag = ClassicalDeclStmt, children = [Node {tag = BitTypeSpec, children = [NilNode], context = ()}, Node {tag = Identifier {identifierName = "b", identifierTok = IdentifierToken "b"}, children = [], context = ()}, Node {tag = IntegerLiteral {integerVal = 0, integerTok = DecimalIntegerLiteralToken "0"}, children = [], context = ()}], context = ()}], context = ()},
                                Node
                                  { tag = Statement,
                                    children =
                                      [ Node
                                          { tag = ForStmt,
                                            children =
                                              [ Node {tag = UintTypeSpec, children = [Node {tag = Identifier {identifierName = "prec", identifierTok = IdentifierToken "prec"}, children = [], context = ()}], context = ()},
                                                Node {tag = Identifier {identifierName = "i", identifierTok = IdentifierToken "i"}, children = [], context = ()},
                                                Node {tag = RangeInitExpr, children = [Node {tag = IntegerLiteral {integerVal = 0, integerTok = DecimalIntegerLiteralToken "0"}, children = [], context = ()}, NilNode, Node {tag = BinaryOperatorExpr {binaryOp = MinusToken}, children = [Node {tag = Identifier {identifierName = "n", identifierTok = IdentifierToken "n"}, children = [], context = ()}, Node {tag = IntegerLiteral {integerVal = 1, integerTok = DecimalIntegerLiteralToken "1"}, children = [], context = ()}], context = ()}], context = ()},
                                                Node
                                                  { tag = Scope,
                                                    children =
                                                      [ Node {tag = Statement, children = [Node {tag = ClassicalDeclStmt, children = [Node {tag = BitTypeSpec, children = [NilNode], context = ()}, Node {tag = Identifier {identifierName = "temp", identifierTok = IdentifierToken "temp"}, children = [], context = ()}, NilNode], context = ()}], context = ()},
                                                        Node
                                                          { tag = Statement,
                                                            children =
                                                              [ Node
                                                                  { tag = IfStmt,
                                                                    children =
                                                                      [ Node {tag = BinaryOperatorExpr {binaryOp = DoubleAmpersandToken}, children = [Node {tag = ParenExpr, children = [Node {tag = BinaryOperatorExpr {binaryOp = DoubleEqualsToken}, children = [Node {tag = ParenExpr, children = [Node {tag = IndexExpr, children = [Node {tag = Identifier {identifierName = "spec", identifierTok = IdentifierToken "spec"}, children = [], context = ()}, Node {tag = List, children = [Node {tag = Identifier {identifierName = "i", identifierTok = IdentifierToken "i"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}, Node {tag = IntegerLiteral {integerVal = 1, integerTok = DecimalIntegerLiteralToken "1"}, children = [], context = ()}], context = ()}], context = ()}, Node {tag = ParenExpr, children = [Node {tag = BinaryOperatorExpr {binaryOp = DoubleEqualsToken}, children = [Node {tag = ParenExpr, children = [Node {tag = IndexExpr, children = [Node {tag = Identifier {identifierName = "spec", identifierTok = IdentifierToken "spec"}, children = [], context = ()}, Node {tag = List, children = [Node {tag = BinaryOperatorExpr {binaryOp = PlusToken}, children = [Node {tag = Identifier {identifierName = "n", identifierTok = IdentifierToken "n"}, children = [], context = ()}, Node {tag = Identifier {identifierName = "i", identifierTok = IdentifierToken "i"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}, Node {tag = IntegerLiteral {integerVal = 0, integerTok = DecimalIntegerLiteralToken "0"}, children = [], context = ()}], context = ()}], context = ()}], context = ()},
                                                                        Node
                                                                          { tag = Scope,
                                                                            children =
                                                                              [ Node {tag = Statement, children = [Node {tag = AssignmentStmt {assignmentOpTok = EqualsToken}, children = [Node {tag = Identifier {identifierName = "temp", identifierTok = IdentifierToken "temp"}, children = [], context = ()}, Node {tag = CallExpr, children = [Node {tag = Identifier {identifierName = "xmeasure", identifierTok = IdentifierToken "xmeasure"}, children = [], context = ()}, Node {tag = List, children = [Node {tag = IndexExpr, children = [Node {tag = Identifier {identifierName = "q", identifierTok = IdentifierToken "q"}, children = [], context = ()}, Node {tag = List, children = [Node {tag = Identifier {identifierName = "i", identifierTok = IdentifierToken "i"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}
                                                                              ],
                                                                            context = ()
                                                                          },
                                                                        NilNode
                                                                      ],
                                                                    context = ()
                                                                  }
                                                              ],
                                                            context = ()
                                                          },
                                                        Node
                                                          { tag = Statement,
                                                            children =
                                                              [ Node
                                                                  { tag = IfStmt,
                                                                    children =
                                                                      [ Node {tag = BinaryOperatorExpr {binaryOp = DoubleAmpersandToken}, children = [Node {tag = ParenExpr, children = [Node {tag = BinaryOperatorExpr {binaryOp = DoubleEqualsToken}, children = [Node {tag = ParenExpr, children = [Node {tag = IndexExpr, children = [Node {tag = Identifier {identifierName = "spec", identifierTok = IdentifierToken "spec"}, children = [], context = ()}, Node {tag = List, children = [Node {tag = Identifier {identifierName = "i", identifierTok = IdentifierToken "i"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}, Node {tag = IntegerLiteral {integerVal = 0, integerTok = DecimalIntegerLiteralToken "0"}, children = [], context = ()}], context = ()}], context = ()}, Node {tag = ParenExpr, children = [Node {tag = BinaryOperatorExpr {binaryOp = DoubleEqualsToken}, children = [Node {tag = ParenExpr, children = [Node {tag = IndexExpr, children = [Node {tag = Identifier {identifierName = "spec", identifierTok = IdentifierToken "spec"}, children = [], context = ()}, Node {tag = List, children = [Node {tag = BinaryOperatorExpr {binaryOp = PlusToken}, children = [Node {tag = Identifier {identifierName = "n", identifierTok = IdentifierToken "n"}, children = [], context = ()}, Node {tag = Identifier {identifierName = "i", identifierTok = IdentifierToken "i"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}, Node {tag = IntegerLiteral {integerVal = 1, integerTok = DecimalIntegerLiteralToken "1"}, children = [], context = ()}], context = ()}], context = ()}], context = ()},
                                                                        Node
                                                                          { tag = Scope,
                                                                            children =
                                                                              [ Node {tag = Statement, children = [Node {tag = AssignmentStmt {assignmentOpTok = EqualsToken}, children = [Node {tag = Identifier {identifierName = "temp", identifierTok = IdentifierToken "temp"}, children = [], context = ()}, Node {tag = MeasureExpr, children = [Node {tag = IndexedIdentifier, children = [Node {tag = Identifier {identifierName = "q", identifierTok = IdentifierToken "q"}, children = [], context = ()}, Node {tag = List, children = [Node {tag = Identifier {identifierName = "i", identifierTok = IdentifierToken "i"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}
                                                                              ],
                                                                            context = ()
                                                                          },
                                                                        NilNode
                                                                      ],
                                                                    context = ()
                                                                  }
                                                              ],
                                                            context = ()
                                                          },
                                                        Node
                                                          { tag = Statement,
                                                            children =
                                                              [ Node
                                                                  { tag = IfStmt,
                                                                    children =
                                                                      [ Node {tag = BinaryOperatorExpr {binaryOp = DoubleAmpersandToken}, children = [Node {tag = ParenExpr, children = [Node {tag = BinaryOperatorExpr {binaryOp = DoubleEqualsToken}, children = [Node {tag = ParenExpr, children = [Node {tag = IndexExpr, children = [Node {tag = Identifier {identifierName = "spec", identifierTok = IdentifierToken "spec"}, children = [], context = ()}, Node {tag = List, children = [Node {tag = Identifier {identifierName = "i", identifierTok = IdentifierToken "i"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}, Node {tag = IntegerLiteral {integerVal = 1, integerTok = DecimalIntegerLiteralToken "1"}, children = [], context = ()}], context = ()}], context = ()}, Node {tag = ParenExpr, children = [Node {tag = BinaryOperatorExpr {binaryOp = DoubleEqualsToken}, children = [Node {tag = ParenExpr, children = [Node {tag = IndexExpr, children = [Node {tag = Identifier {identifierName = "spec", identifierTok = IdentifierToken "spec"}, children = [], context = ()}, Node {tag = List, children = [Node {tag = BinaryOperatorExpr {binaryOp = PlusToken}, children = [Node {tag = Identifier {identifierName = "n", identifierTok = IdentifierToken "n"}, children = [], context = ()}, Node {tag = Identifier {identifierName = "i", identifierTok = IdentifierToken "i"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}, Node {tag = IntegerLiteral {integerVal = 1, integerTok = DecimalIntegerLiteralToken "1"}, children = [], context = ()}], context = ()}], context = ()}], context = ()},
                                                                        Node
                                                                          { tag = Scope,
                                                                            children =
                                                                              [ Node {tag = Statement, children = [Node {tag = AssignmentStmt {assignmentOpTok = EqualsToken}, children = [Node {tag = Identifier {identifierName = "temp", identifierTok = IdentifierToken "temp"}, children = [], context = ()}, Node {tag = CallExpr, children = [Node {tag = Identifier {identifierName = "ymeasure", identifierTok = IdentifierToken "ymeasure"}, children = [], context = ()}, Node {tag = List, children = [Node {tag = IndexExpr, children = [Node {tag = Identifier {identifierName = "q", identifierTok = IdentifierToken "q"}, children = [], context = ()}, Node {tag = List, children = [Node {tag = Identifier {identifierName = "i", identifierTok = IdentifierToken "i"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}
                                                                              ],
                                                                            context = ()
                                                                          },
                                                                        NilNode
                                                                      ],
                                                                    context = ()
                                                                  }
                                                              ],
                                                            context = ()
                                                          },
                                                        Node {tag = Statement, children = [Node {tag = AssignmentStmt {assignmentOpTok = CaretEqualsToken}, children = [Node {tag = Identifier {identifierName = "b", identifierTok = IdentifierToken "b"}, children = [], context = ()}, Node {tag = Identifier {identifierName = "temp", identifierTok = IdentifierToken "temp"}, children = [], context = ()}], context = ()}], context = ()}
                                                      ],
                                                    context = ()
                                                  }
                                              ],
                                            context = ()
                                          }
                                      ],
                                    context = ()
                                  },
                                Node {tag = Statement, children = [Node {tag = ReturnStmt, children = [Node {tag = Identifier {identifierName = "b", identifierTok = IdentifierToken "b"}, children = [], context = ()}], context = ()}], context = ()}
                              ],
                            context = ()
                          }
                      ],
                    context = ()
                  }
              ],
            context = ()
          },
        Node
          { tag = Statement,
            children =
              [ Node
                  { tag = DefStmt,
                    children =
                      [ Node {tag = Identifier {identifierName = "trial_circuit", identifierTok = IdentifierToken "trial_circuit"}, children = [], context = ()},
                        Node {tag = List, children = [Node {tag = ArgumentDefinition, children = [Node {tag = QubitTypeSpec, children = [Node {tag = Identifier {identifierName = "n", identifierTok = IdentifierToken "n"}, children = [], context = ()}], context = ()}, Node {tag = Identifier {identifierName = "q", identifierTok = IdentifierToken "q"}, children = [], context = ()}], context = ()}], context = ()},
                        NilNode,
                        Node
                          { tag = Scope,
                            children =
                              [ Node
                                  { tag = Statement,
                                    children =
                                      [ Node
                                          { tag = ForStmt,
                                            children =
                                              [ Node {tag = IntTypeSpec, children = [Node {tag = Identifier {identifierName = "prec", identifierTok = IdentifierToken "prec"}, children = [], context = ()}], context = ()},
                                                Node {tag = Identifier {identifierName = "l", identifierTok = IdentifierToken "l"}, children = [], context = ()},
                                                Node {tag = RangeInitExpr, children = [Node {tag = IntegerLiteral {integerVal = 0, integerTok = DecimalIntegerLiteralToken "0"}, children = [], context = ()}, NilNode, Node {tag = BinaryOperatorExpr {binaryOp = MinusToken}, children = [Node {tag = Identifier {identifierName = "layers", identifierTok = IdentifierToken "layers"}, children = [], context = ()}, Node {tag = IntegerLiteral {integerVal = 1, integerTok = DecimalIntegerLiteralToken "1"}, children = [], context = ()}], context = ()}], context = ()},
                                                Node
                                                  { tag = Scope,
                                                    children =
                                                      [ Node
                                                          { tag = Statement,
                                                            children =
                                                              [ Node
                                                                  { tag = ForStmt,
                                                                    children =
                                                                      [ Node {tag = UintTypeSpec, children = [Node {tag = Identifier {identifierName = "prec", identifierTok = IdentifierToken "prec"}, children = [], context = ()}], context = ()},
                                                                        Node {tag = Identifier {identifierName = "i", identifierTok = IdentifierToken "i"}, children = [], context = ()},
                                                                        Node {tag = RangeInitExpr, children = [Node {tag = IntegerLiteral {integerVal = 0, integerTok = DecimalIntegerLiteralToken "0"}, children = [], context = ()}, NilNode, Node {tag = BinaryOperatorExpr {binaryOp = MinusToken}, children = [Node {tag = Identifier {identifierName = "n", identifierTok = IdentifierToken "n"}, children = [], context = ()}, Node {tag = IntegerLiteral {integerVal = 1, integerTok = DecimalIntegerLiteralToken "1"}, children = [], context = ()}], context = ()}], context = ()},
                                                                        Node
                                                                          { tag = Scope,
                                                                            children =
                                                                              [ Node {tag = Statement, children = [Node {tag = ClassicalDeclStmt, children = [Node {tag = AngleTypeSpec, children = [Node {tag = Identifier {identifierName = "prec", identifierTok = IdentifierToken "prec"}, children = [], context = ()}], context = ()}, Node {tag = Identifier {identifierName = "theta", identifierTok = IdentifierToken "theta"}, children = [], context = ()}, NilNode], context = ()}], context = ()},
                                                                                Node {tag = Statement, children = [Node {tag = AssignmentStmt {assignmentOpTok = EqualsToken}, children = [Node {tag = Identifier {identifierName = "theta", identifierTok = IdentifierToken "theta"}, children = [], context = ()}, Node {tag = CallExpr, children = [Node {tag = Identifier {identifierName = "get_parameter", identifierTok = IdentifierToken "get_parameter"}, children = [], context = ()}, Node {tag = List, children = [Node {tag = BinaryOperatorExpr {binaryOp = PlusToken}, children = [Node {tag = ParenExpr, children = [Node {tag = BinaryOperatorExpr {binaryOp = AsteriskToken}, children = [Node {tag = Identifier {identifierName = "l", identifierTok = IdentifierToken "l"}, children = [], context = ()}, Node {tag = Identifier {identifierName = "layers", identifierTok = IdentifierToken "layers"}, children = [], context = ()}], context = ()}], context = ()}, Node {tag = Identifier {identifierName = "i", identifierTok = IdentifierToken "i"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}], context = ()},
                                                                                Node {tag = Statement, children = [Node {tag = GateCallStmt, children = [NilNode, Node {tag = Identifier {identifierName = "ry", identifierTok = IdentifierToken "ry"}, children = [], context = ()}, Node {tag = List, children = [Node {tag = Identifier {identifierName = "theta", identifierTok = IdentifierToken "theta"}, children = [], context = ()}], context = ()}, NilNode, Node {tag = List, children = [Node {tag = IndexedIdentifier, children = [Node {tag = Identifier {identifierName = "q", identifierTok = IdentifierToken "q"}, children = [], context = ()}, Node {tag = List, children = [Node {tag = Identifier {identifierName = "i", identifierTok = IdentifierToken "i"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}
                                                                              ],
                                                                            context = ()
                                                                          }
                                                                      ],
                                                                    context = ()
                                                                  }
                                                              ],
                                                            context = ()
                                                          },
                                                        Node {tag = Statement, children = [Node {tag = IfStmt, children = [Node {tag = BinaryOperatorExpr {binaryOp = ExclamationPointEqualsToken}, children = [Node {tag = Identifier {identifierName = "l", identifierTok = IdentifierToken "l"}, children = [], context = ()}, Node {tag = ParenExpr, children = [Node {tag = BinaryOperatorExpr {binaryOp = MinusToken}, children = [Node {tag = Identifier {identifierName = "layers", identifierTok = IdentifierToken "layers"}, children = [], context = ()}, Node {tag = IntegerLiteral {integerVal = 1, integerTok = DecimalIntegerLiteralToken "1"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}, Node {tag = Statement, children = [Node {tag = GateCallStmt, children = [NilNode, Node {tag = Identifier {identifierName = "entangler", identifierTok = IdentifierToken "entangler"}, children = [], context = ()}, NilNode, NilNode, Node {tag = List, children = [Node {tag = Identifier {identifierName = "q", identifierTok = IdentifierToken "q"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}, NilNode], context = ()}], context = ()}
                                                      ],
                                                    context = ()
                                                  }
                                              ],
                                            context = ()
                                          }
                                      ],
                                    context = ()
                                  }
                              ],
                            context = ()
                          }
                      ],
                    context = ()
                  }
              ],
            context = ()
          },
        Node
          { tag = Statement,
            children =
              [ Node
                  { tag = DefStmt,
                    children =
                      [ Node {tag = Identifier {identifierName = "counts_for_term", identifierTok = IdentifierToken "counts_for_term"}, children = [], context = ()},
                        Node {tag = List, children = [Node {tag = ArgumentDefinition, children = [Node {tag = BitTypeSpec, children = [Node {tag = BinaryOperatorExpr {binaryOp = AsteriskToken}, children = [Node {tag = IntegerLiteral {integerVal = 2, integerTok = DecimalIntegerLiteralToken "2"}, children = [], context = ()}, Node {tag = Identifier {identifierName = "n", identifierTok = IdentifierToken "n"}, children = [], context = ()}], context = ()}], context = ()}, Node {tag = Identifier {identifierName = "spec", identifierTok = IdentifierToken "spec"}, children = [], context = ()}], context = ()}, Node {tag = ArgumentDefinition, children = [Node {tag = QubitTypeSpec, children = [Node {tag = Identifier {identifierName = "n", identifierTok = IdentifierToken "n"}, children = [], context = ()}], context = ()}, Node {tag = Identifier {identifierName = "q", identifierTok = IdentifierToken "q"}, children = [], context = ()}], context = ()}], context = ()},
                        Node {tag = UintTypeSpec, children = [Node {tag = Identifier {identifierName = "prec", identifierTok = IdentifierToken "prec"}, children = [], context = ()}], context = ()},
                        Node
                          { tag = Scope,
                            children =
                              [ Node {tag = Statement, children = [Node {tag = ClassicalDeclStmt, children = [Node {tag = UintTypeSpec, children = [Node {tag = Identifier {identifierName = "prec", identifierTok = IdentifierToken "prec"}, children = [], context = ()}], context = ()}, Node {tag = Identifier {identifierName = "counts", identifierTok = IdentifierToken "counts"}, children = [], context = ()}, NilNode], context = ()}], context = ()},
                                Node
                                  { tag = Statement,
                                    children =
                                      [ Node
                                          { tag = ForStmt,
                                            children =
                                              [ Node {tag = UintTypeSpec, children = [NilNode], context = ()},
                                                Node {tag = Identifier {identifierName = "i", identifierTok = IdentifierToken "i"}, children = [], context = ()},
                                                Node {tag = RangeInitExpr, children = [Node {tag = IntegerLiteral {integerVal = 1, integerTok = DecimalIntegerLiteralToken "1"}, children = [], context = ()}, NilNode, Node {tag = Identifier {identifierName = "shots", identifierTok = IdentifierToken "shots"}, children = [], context = ()}], context = ()},
                                                Node
                                                  { tag = Scope,
                                                    children =
                                                      [ Node {tag = Statement, children = [Node {tag = ClassicalDeclStmt, children = [Node {tag = BitTypeSpec, children = [NilNode], context = ()}, Node {tag = Identifier {identifierName = "b", identifierTok = IdentifierToken "b"}, children = [], context = ()}, NilNode], context = ()}], context = ()},
                                                        Node {tag = Statement, children = [Node {tag = ResetStmt, children = [Node {tag = Identifier {identifierName = "q", identifierTok = IdentifierToken "q"}, children = [], context = ()}], context = ()}], context = ()},
                                                        Node {tag = Statement, children = [Node {tag = GateCallStmt, children = [NilNode, Node {tag = Identifier {identifierName = "trial_circuit", identifierTok = IdentifierToken "trial_circuit"}, children = [], context = ()}, NilNode, NilNode, Node {tag = List, children = [Node {tag = Identifier {identifierName = "q", identifierTok = IdentifierToken "q"}, children = [], context = ()}], context = ()}], context = ()}], context = ()},
                                                        Node {tag = Statement, children = [Node {tag = AssignmentStmt {assignmentOpTok = EqualsToken}, children = [Node {tag = Identifier {identifierName = "b", identifierTok = IdentifierToken "b"}, children = [], context = ()}, Node {tag = CallExpr, children = [Node {tag = Identifier {identifierName = "pauli_measurement", identifierTok = IdentifierToken "pauli_measurement"}, children = [], context = ()}, Node {tag = List, children = [Node {tag = Identifier {identifierName = "spec", identifierTok = IdentifierToken "spec"}, children = [], context = ()}, Node {tag = Identifier {identifierName = "q", identifierTok = IdentifierToken "q"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}], context = ()},
                                                        Node {tag = Statement, children = [Node {tag = AssignmentStmt {assignmentOpTok = PlusEqualsToken}, children = [Node {tag = Identifier {identifierName = "counts", identifierTok = IdentifierToken "counts"}, children = [], context = ()}, Node {tag = CastExpr, children = [Node {tag = IntTypeSpec, children = [Node {tag = IntegerLiteral {integerVal = 1, integerTok = DecimalIntegerLiteralToken "1"}, children = [], context = ()}], context = ()}, Node {tag = Identifier {identifierName = "b", identifierTok = IdentifierToken "b"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}
                                                      ],
                                                    context = ()
                                                  }
                                              ],
                                            context = ()
                                          }
                                      ],
                                    context = ()
                                  },
                                Node {tag = Statement, children = [Node {tag = ReturnStmt, children = [Node {tag = Identifier {identifierName = "counts", identifierTok = IdentifierToken "counts"}, children = [], context = ()}], context = ()}], context = ()}
                              ],
                            context = ()
                          }
                      ],
                    context = ()
                  }
              ],
            context = ()
          },
        Node
          { tag = Statement,
            children =
              [ Node
                  { tag = DefStmt,
                    children =
                      [ Node {tag = Identifier {identifierName = "estimate_energy", identifierTok = IdentifierToken "estimate_energy"}, children = [], context = ()},
                        Node {tag = List, children = [Node {tag = ArgumentDefinition, children = [Node {tag = QubitTypeSpec, children = [Node {tag = Identifier {identifierName = "n", identifierTok = IdentifierToken "n"}, children = [], context = ()}], context = ()}, Node {tag = Identifier {identifierName = "q", identifierTok = IdentifierToken "q"}, children = [], context = ()}], context = ()}], context = ()},
                        Node {tag = FloatTypeSpec, children = [Node {tag = Identifier {identifierName = "prec", identifierTok = IdentifierToken "prec"}, children = [], context = ()}], context = ()},
                        Node
                          { tag = Scope,
                            children =
                              [ Node {tag = Statement, children = [Node {tag = ClassicalDeclStmt, children = [Node {tag = FloatTypeSpec, children = [Node {tag = Identifier {identifierName = "prec", identifierTok = IdentifierToken "prec"}, children = [], context = ()}], context = ()}, Node {tag = Identifier {identifierName = "energy", identifierTok = IdentifierToken "energy"}, children = [], context = ()}, NilNode], context = ()}], context = ()},
                                Node {tag = Statement, children = [Node {tag = ClassicalDeclStmt, children = [Node {tag = UintTypeSpec, children = [Node {tag = Identifier {identifierName = "prec", identifierTok = IdentifierToken "prec"}, children = [], context = ()}], context = ()}, Node {tag = Identifier {identifierName = "npaulis", identifierTok = IdentifierToken "npaulis"}, children = [], context = ()}, Node {tag = CallExpr, children = [Node {tag = Identifier {identifierName = "get_npaulis", identifierTok = IdentifierToken "get_npaulis"}, children = [], context = ()}, Node {tag = List, children = [], context = ()}], context = ()}], context = ()}], context = ()},
                                Node
                                  { tag = Statement,
                                    children =
                                      [ Node
                                          { tag = ForStmt,
                                            children =
                                              [ Node {tag = IntTypeSpec, children = [Node {tag = Identifier {identifierName = "prec", identifierTok = IdentifierToken "prec"}, children = [], context = ()}], context = ()},
                                                Node {tag = Identifier {identifierName = "t", identifierTok = IdentifierToken "t"}, children = [], context = ()},
                                                Node {tag = RangeInitExpr, children = [Node {tag = IntegerLiteral {integerVal = 0, integerTok = DecimalIntegerLiteralToken "0"}, children = [], context = ()}, NilNode, Node {tag = BinaryOperatorExpr {binaryOp = MinusToken}, children = [Node {tag = Identifier {identifierName = "npaulis", identifierTok = IdentifierToken "npaulis"}, children = [], context = ()}, Node {tag = IntegerLiteral {integerVal = 1, integerTok = DecimalIntegerLiteralToken "1"}, children = [], context = ()}], context = ()}], context = ()},
                                                Node
                                                  { tag = Scope,
                                                    children =
                                                      [ Node {tag = Statement, children = [Node {tag = ClassicalDeclStmt, children = [Node {tag = BitTypeSpec, children = [Node {tag = BinaryOperatorExpr {binaryOp = AsteriskToken}, children = [Node {tag = IntegerLiteral {integerVal = 2, integerTok = DecimalIntegerLiteralToken "2"}, children = [], context = ()}, Node {tag = Identifier {identifierName = "n", identifierTok = IdentifierToken "n"}, children = [], context = ()}], context = ()}], context = ()}, Node {tag = Identifier {identifierName = "spec", identifierTok = IdentifierToken "spec"}, children = [], context = ()}, Node {tag = CallExpr, children = [Node {tag = Identifier {identifierName = "get_pauli", identifierTok = IdentifierToken "get_pauli"}, children = [], context = ()}, Node {tag = List, children = [Node {tag = Identifier {identifierName = "t", identifierTok = IdentifierToken "t"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}], context = ()},
                                                        Node {tag = Statement, children = [Node {tag = ClassicalDeclStmt, children = [Node {tag = UintTypeSpec, children = [Node {tag = Identifier {identifierName = "prec", identifierTok = IdentifierToken "prec"}, children = [], context = ()}], context = ()}, Node {tag = Identifier {identifierName = "counts", identifierTok = IdentifierToken "counts"}, children = [], context = ()}, NilNode], context = ()}], context = ()},
                                                        Node {tag = Statement, children = [Node {tag = AssignmentStmt {assignmentOpTok = EqualsToken}, children = [Node {tag = Identifier {identifierName = "counts", identifierTok = IdentifierToken "counts"}, children = [], context = ()}, Node {tag = CallExpr, children = [Node {tag = Identifier {identifierName = "counts_for_term", identifierTok = IdentifierToken "counts_for_term"}, children = [], context = ()}, Node {tag = List, children = [Node {tag = Identifier {identifierName = "spec", identifierTok = IdentifierToken "spec"}, children = [], context = ()}, Node {tag = Identifier {identifierName = "q", identifierTok = IdentifierToken "q"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}], context = ()},
                                                        Node {tag = Statement, children = [Node {tag = AssignmentStmt {assignmentOpTok = EqualsToken}, children = [Node {tag = Identifier {identifierName = "energy", identifierTok = IdentifierToken "energy"}, children = [], context = ()}, Node {tag = CallExpr, children = [Node {tag = Identifier {identifierName = "update_energy", identifierTok = IdentifierToken "update_energy"}, children = [], context = ()}, Node {tag = List, children = [Node {tag = Identifier {identifierName = "t", identifierTok = IdentifierToken "t"}, children = [], context = ()}, Node {tag = Identifier {identifierName = "counts", identifierTok = IdentifierToken "counts"}, children = [], context = ()}, Node {tag = Identifier {identifierName = "energy", identifierTok = IdentifierToken "energy"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}
                                                      ],
                                                    context = ()
                                                  }
                                              ],
                                            context = ()
                                          }
                                      ],
                                    context = ()
                                  },
                                Node {tag = Statement, children = [Node {tag = ReturnStmt, children = [Node {tag = Identifier {identifierName = "energy", identifierTok = IdentifierToken "energy"}, children = [], context = ()}], context = ()}], context = ()}
                              ],
                            context = ()
                          }
                      ],
                    context = ()
                  }
              ],
            context = ()
          },
        Node {tag = Statement, children = [Node {tag = QuantumDeclStmt, children = [Node {tag = QubitTypeSpec, children = [Node {tag = Identifier {identifierName = "n", identifierTok = IdentifierToken "n"}, children = [], context = ()}], context = ()}, Node {tag = Identifier {identifierName = "q", identifierTok = IdentifierToken "q"}, children = [], context = ()}], context = ()}], context = ()},
        Node {tag = Statement, children = [Node {tag = ClassicalDeclStmt, children = [Node {tag = FloatTypeSpec, children = [Node {tag = Identifier {identifierName = "prec", identifierTok = IdentifierToken "prec"}, children = [], context = ()}], context = ()}, Node {tag = Identifier {identifierName = "energy", identifierTok = IdentifierToken "energy"}, children = [], context = ()}, NilNode], context = ()}], context = ()},
        Node {tag = Statement, children = [Node {tag = AssignmentStmt {assignmentOpTok = EqualsToken}, children = [Node {tag = Identifier {identifierName = "energy", identifierTok = IdentifierToken "energy"}, children = [], context = ()}, Node {tag = CallExpr, children = [Node {tag = Identifier {identifierName = "estimate_energy", identifierTok = IdentifierToken "estimate_energy"}, children = [], context = ()}, Node {tag = List, children = [Node {tag = Identifier {identifierName = "q", identifierTok = IdentifierToken "q"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}
      ],
    context = ()
  }
