Node
  { tag = Program {openqasmMajorVersion = 3, openqasmMinorVersion = Nothing, versionTok = EofToken},
    children =
      [ Node {tag = Statement, children = [Node {tag = IncludeStmt {includePath = "stdgates.inc", includeTok = StringLiteralToken "\"stdgates.inc\""}, children = [], context = ()}], context = ()},
        Node {tag = Statement, children = [Node {tag = ConstDeclStmt, children = [Node {tag = IntTypeSpec, children = [Node {tag = IntegerLiteral {integerVal = 32, integerTok = DecimalIntegerLiteralToken "32"}, children = [], context = ()}], context = ()}, Node {tag = Identifier {identifierName = "d", identifierTok = IdentifierToken "d"}, children = [], context = ()}, Node {tag = IntegerLiteral {integerVal = 3, integerTok = DecimalIntegerLiteralToken "3"}, children = [], context = ()}], context = ()}], context = ()},
        Node {tag = Statement, children = [Node {tag = ConstDeclStmt, children = [Node {tag = IntTypeSpec, children = [Node {tag = IntegerLiteral {integerVal = 32, integerTok = DecimalIntegerLiteralToken "32"}, children = [], context = ()}], context = ()}, Node {tag = Identifier {identifierName = "m", identifierTok = IdentifierToken "m"}, children = [], context = ()}, Node {tag = IntegerLiteral {integerVal = 10, integerTok = DecimalIntegerLiteralToken "10"}, children = [], context = ()}], context = ()}], context = ()},
        Node {tag = Statement, children = [Node {tag = ConstDeclStmt, children = [Node {tag = IntTypeSpec, children = [Node {tag = IntegerLiteral {integerVal = 32, integerTok = DecimalIntegerLiteralToken "32"}, children = [], context = ()}], context = ()}, Node {tag = Identifier {identifierName = "shots", identifierTok = IdentifierToken "shots"}, children = [], context = ()}, Node {tag = IntegerLiteral {integerVal = 1000, integerTok = DecimalIntegerLiteralToken "1000"}, children = [], context = ()}], context = ()}], context = ()},
        Node {tag = Statement, children = [Node {tag = ConstDeclStmt, children = [Node {tag = IntTypeSpec, children = [Node {tag = IntegerLiteral {integerVal = 32, integerTok = DecimalIntegerLiteralToken "32"}, children = [], context = ()}], context = ()}, Node {tag = Identifier {identifierName = "n", identifierTok = IdentifierToken "n"}, children = [], context = ()}, Node {tag = BinaryOperatorExpr {binaryOp = DoubleAsteriskToken}, children = [Node {tag = Identifier {identifierName = "d", identifierTok = IdentifierToken "d"}, children = [], context = ()}, Node {tag = IntegerLiteral {integerVal = 2, integerTok = DecimalIntegerLiteralToken "2"}, children = [], context = ()}], context = ()}], context = ()}], context = ()},
        Node {tag = Statement, children = [Node {tag = ClassicalDeclStmt, children = [Node {tag = UintTypeSpec, children = [Node {tag = IntegerLiteral {integerVal = 32, integerTok = DecimalIntegerLiteralToken "32"}, children = [], context = ()}], context = ()}, Node {tag = Identifier {identifierName = "failures", identifierTok = IdentifierToken "failures"}, children = [], context = ()}, NilNode], context = ()}], context = ()},
        Node {tag = Statement, children = [Node {tag = ExternStmt, children = [Node {tag = Identifier {identifierName = "zfirst", identifierTok = IdentifierToken "zfirst"}, children = [], context = ()}, Node {tag = List, children = [Node {tag = CregTypeSpec, children = [Node {tag = BinaryOperatorExpr {binaryOp = MinusToken}, children = [Node {tag = Identifier {identifierName = "n", identifierTok = IdentifierToken "n"}, children = [], context = ()}, Node {tag = IntegerLiteral {integerVal = 1, integerTok = DecimalIntegerLiteralToken "1"}, children = [], context = ()}], context = ()}], context = ()}, Node {tag = IntTypeSpec, children = [Node {tag = IntegerLiteral {integerVal = 32, integerTok = DecimalIntegerLiteralToken "32"}, children = [], context = ()}], context = ()}, Node {tag = IntTypeSpec, children = [Node {tag = IntegerLiteral {integerVal = 32, integerTok = DecimalIntegerLiteralToken "32"}, children = [], context = ()}], context = ()}], context = ()}, NilNode], context = ()}], context = ()},
        Node {tag = Statement, children = [Node {tag = ExternStmt, children = [Node {tag = Identifier {identifierName = "send", identifierTok = IdentifierToken "send"}, children = [], context = ()}, Node {tag = List, children = [Node {tag = CregTypeSpec, children = [Node {tag = BinaryOperatorExpr {binaryOp = MinusToken}, children = [Node {tag = Identifier {identifierName = "n", identifierTok = IdentifierToken "n"}, children = [], context = ()}, Node {tag = IntegerLiteral {integerVal = 1, integerTok = DecimalIntegerLiteralToken "1"}, children = [], context = ()}], context = ()}], context = ()}, Node {tag = IntTypeSpec, children = [Node {tag = IntegerLiteral {integerVal = 32, integerTok = DecimalIntegerLiteralToken "32"}, children = [], context = ()}], context = ()}, Node {tag = IntTypeSpec, children = [Node {tag = IntegerLiteral {integerVal = 32, integerTok = DecimalIntegerLiteralToken "32"}, children = [], context = ()}], context = ()}, Node {tag = IntTypeSpec, children = [Node {tag = IntegerLiteral {integerVal = 32, integerTok = DecimalIntegerLiteralToken "32"}, children = [], context = ()}], context = ()}], context = ()}, NilNode], context = ()}], context = ()},
        Node {tag = Statement, children = [Node {tag = ExternStmt, children = [Node {tag = Identifier {identifierName = "zlast", identifierTok = IdentifierToken "zlast"}, children = [], context = ()}, Node {tag = List, children = [Node {tag = CregTypeSpec, children = [Node {tag = Identifier {identifierName = "n", identifierTok = IdentifierToken "n"}, children = [], context = ()}], context = ()}, Node {tag = IntTypeSpec, children = [Node {tag = IntegerLiteral {integerVal = 32, integerTok = DecimalIntegerLiteralToken "32"}, children = [], context = ()}], context = ()}, Node {tag = IntTypeSpec, children = [Node {tag = IntegerLiteral {integerVal = 32, integerTok = DecimalIntegerLiteralToken "32"}, children = [], context = ()}], context = ()}], context = ()}, Node {tag = BitTypeSpec, children = [NilNode], context = ()}], context = ()}], context = ()},
        Node {tag = Statement, children = [Node {tag = QuantumDeclStmt, children = [Node {tag = QubitTypeSpec, children = [Node {tag = Identifier {identifierName = "n", identifierTok = IdentifierToken "n"}, children = [], context = ()}], context = ()}, Node {tag = Identifier {identifierName = "data", identifierTok = IdentifierToken "data"}, children = [], context = ()}], context = ()}], context = ()},
        Node {tag = Statement, children = [Node {tag = QuantumDeclStmt, children = [Node {tag = QubitTypeSpec, children = [Node {tag = BinaryOperatorExpr {binaryOp = MinusToken}, children = [Node {tag = Identifier {identifierName = "n", identifierTok = IdentifierToken "n"}, children = [], context = ()}, Node {tag = IntegerLiteral {integerVal = 1, integerTok = DecimalIntegerLiteralToken "1"}, children = [], context = ()}], context = ()}], context = ()}, Node {tag = Identifier {identifierName = "ancilla", identifierTok = IdentifierToken "ancilla"}, children = [], context = ()}], context = ()}], context = ()},
        Node {tag = Statement, children = [Node {tag = ClassicalDeclStmt, children = [Node {tag = BitTypeSpec, children = [Node {tag = BinaryOperatorExpr {binaryOp = MinusToken}, children = [Node {tag = Identifier {identifierName = "n", identifierTok = IdentifierToken "n"}, children = [], context = ()}, Node {tag = IntegerLiteral {integerVal = 1, integerTok = DecimalIntegerLiteralToken "1"}, children = [], context = ()}], context = ()}], context = ()}, Node {tag = Identifier {identifierName = "layer", identifierTok = IdentifierToken "layer"}, children = [], context = ()}, NilNode], context = ()}], context = ()},
        Node {tag = Statement, children = [Node {tag = ClassicalDeclStmt, children = [Node {tag = BitTypeSpec, children = [Node {tag = Identifier {identifierName = "n", identifierTok = IdentifierToken "n"}, children = [], context = ()}], context = ()}, Node {tag = Identifier {identifierName = "data_outcomes", identifierTok = IdentifierToken "data_outcomes"}, children = [], context = ()}, NilNode], context = ()}], context = ()},
        Node {tag = Statement, children = [Node {tag = ClassicalDeclStmt, children = [Node {tag = BitTypeSpec, children = [NilNode], context = ()}, Node {tag = Identifier {identifierName = "outcome", identifierTok = IdentifierToken "outcome"}, children = [], context = ()}, NilNode], context = ()}], context = ()},
        Node
          { tag = Statement,
            children =
              [ Node
                  { tag = DefStmt,
                    children =
                      [ Node {tag = Identifier {identifierName = "hadamard_layer", identifierTok = IdentifierToken "hadamard_layer"}, children = [], context = ()},
                        Node {tag = List, children = [Node {tag = ArgumentDefinition, children = [Node {tag = QubitTypeSpec, children = [Node {tag = BinaryOperatorExpr {binaryOp = MinusToken}, children = [Node {tag = Identifier {identifierName = "n", identifierTok = IdentifierToken "n"}, children = [], context = ()}, Node {tag = IntegerLiteral {integerVal = 1, integerTok = DecimalIntegerLiteralToken "1"}, children = [], context = ()}], context = ()}], context = ()}, Node {tag = Identifier {identifierName = "ancilla", identifierTok = IdentifierToken "ancilla"}, children = [], context = ()}], context = ()}], context = ()},
                        NilNode,
                        Node
                          { tag = Scope,
                            children =
                              [ Node
                                  { tag = Statement,
                                    children =
                                      [ Node
                                          { tag = ForStmt,
                                            children =
                                              [ Node {tag = UintTypeSpec, children = [Node {tag = IntegerLiteral {integerVal = 32, integerTok = DecimalIntegerLiteralToken "32"}, children = [], context = ()}], context = ()},
                                                Node {tag = Identifier {identifierName = "row", identifierTok = IdentifierToken "row"}, children = [], context = ()},
                                                Node {tag = RangeInitExpr, children = [Node {tag = IntegerLiteral {integerVal = 0, integerTok = DecimalIntegerLiteralToken "0"}, children = [], context = ()}, NilNode, Node {tag = BinaryOperatorExpr {binaryOp = MinusToken}, children = [Node {tag = Identifier {identifierName = "d", identifierTok = IdentifierToken "d"}, children = [], context = ()}, Node {tag = IntegerLiteral {integerVal = 2, integerTok = DecimalIntegerLiteralToken "2"}, children = [], context = ()}], context = ()}], context = ()},
                                                Node
                                                  { tag = Scope,
                                                    children =
                                                      [ Node
                                                          { tag = Statement,
                                                            children =
                                                              [ Node
                                                                  { tag = ForStmt,
                                                                    children =
                                                                      [ Node {tag = UintTypeSpec, children = [Node {tag = IntegerLiteral {integerVal = 32, integerTok = DecimalIntegerLiteralToken "32"}, children = [], context = ()}], context = ()},
                                                                        Node {tag = Identifier {identifierName = "col", identifierTok = IdentifierToken "col"}, children = [], context = ()},
                                                                        Node {tag = RangeInitExpr, children = [Node {tag = IntegerLiteral {integerVal = 0, integerTok = DecimalIntegerLiteralToken "0"}, children = [], context = ()}, NilNode, Node {tag = BinaryOperatorExpr {binaryOp = MinusToken}, children = [Node {tag = Identifier {identifierName = "d", identifierTok = IdentifierToken "d"}, children = [], context = ()}, Node {tag = IntegerLiteral {integerVal = 2, integerTok = DecimalIntegerLiteralToken "2"}, children = [], context = ()}], context = ()}], context = ()},
                                                                        Node
                                                                          { tag = Scope,
                                                                            children =
                                                                              [ Node {tag = Statement, children = [Node {tag = ClassicalDeclStmt, children = [Node {tag = BitTypeSpec, children = [Node {tag = IntegerLiteral {integerVal = 32, integerTok = DecimalIntegerLiteralToken "32"}, children = [], context = ()}], context = ()}, Node {tag = Identifier {identifierName = "sum", identifierTok = IdentifierToken "sum"}, children = [], context = ()}, Node {tag = CastExpr, children = [Node {tag = BitTypeSpec, children = [Node {tag = IntegerLiteral {integerVal = 32, integerTok = DecimalIntegerLiteralToken "32"}, children = [], context = ()}], context = ()}, Node {tag = BinaryOperatorExpr {binaryOp = PlusToken}, children = [Node {tag = Identifier {identifierName = "row", identifierTok = IdentifierToken "row"}, children = [], context = ()}, Node {tag = Identifier {identifierName = "col", identifierTok = IdentifierToken "col"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}], context = ()},
                                                                                Node {tag = Statement, children = [Node {tag = IfStmt, children = [Node {tag = BinaryOperatorExpr {binaryOp = DoubleEqualsToken}, children = [Node {tag = ParenExpr, children = [Node {tag = IndexExpr, children = [Node {tag = Identifier {identifierName = "sum", identifierTok = IdentifierToken "sum"}, children = [], context = ()}, Node {tag = List, children = [Node {tag = IntegerLiteral {integerVal = 0, integerTok = DecimalIntegerLiteralToken "0"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}, Node {tag = IntegerLiteral {integerVal = 1, integerTok = DecimalIntegerLiteralToken "1"}, children = [], context = ()}], context = ()}, Node {tag = Statement, children = [Node {tag = GateCallStmt, children = [NilNode, Node {tag = Identifier {identifierName = "h", identifierTok = IdentifierToken "h"}, children = [], context = ()}, NilNode, NilNode, Node {tag = List, children = [Node {tag = IndexedIdentifier, children = [Node {tag = Identifier {identifierName = "ancilla", identifierTok = IdentifierToken "ancilla"}, children = [], context = ()}, Node {tag = List, children = [Node {tag = BinaryOperatorExpr {binaryOp = PlusToken}, children = [Node {tag = ParenExpr, children = [Node {tag = BinaryOperatorExpr {binaryOp = AsteriskToken}, children = [Node {tag = Identifier {identifierName = "row", identifierTok = IdentifierToken "row"}, children = [], context = ()}, Node {tag = ParenExpr, children = [Node {tag = BinaryOperatorExpr {binaryOp = MinusToken}, children = [Node {tag = Identifier {identifierName = "d", identifierTok = IdentifierToken "d"}, children = [], context = ()}, Node {tag = IntegerLiteral {integerVal = 1, integerTok = DecimalIntegerLiteralToken "1"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}, Node {tag = Identifier {identifierName = "col", identifierTok = IdentifierToken "col"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}, NilNode], context = ()}], context = ()}
                                                                              ],
                                                                            context = ()
                                                                          }
                                                                      ],
                                                                    context = ()
                                                                  }
                                                              ],
                                                            context = ()
                                                          }
                                                      ],
                                                    context = ()
                                                  }
                                              ],
                                            context = ()
                                          }
                                      ],
                                    context = ()
                                  },
                                Node
                                  { tag = Statement,
                                    children =
                                      [ Node
                                          { tag = ForStmt,
                                            children =
                                              [ Node {tag = UintTypeSpec, children = [Node {tag = IntegerLiteral {integerVal = 32, integerTok = DecimalIntegerLiteralToken "32"}, children = [], context = ()}], context = ()},
                                                Node {tag = Identifier {identifierName = "i", identifierTok = IdentifierToken "i"}, children = [], context = ()},
                                                Node {tag = RangeInitExpr, children = [Node {tag = IntegerLiteral {integerVal = 0, integerTok = DecimalIntegerLiteralToken "0"}, children = [], context = ()}, NilNode, Node {tag = BinaryOperatorExpr {binaryOp = MinusToken}, children = [Node {tag = Identifier {identifierName = "d", identifierTok = IdentifierToken "d"}, children = [], context = ()}, Node {tag = IntegerLiteral {integerVal = 2, integerTok = DecimalIntegerLiteralToken "2"}, children = [], context = ()}], context = ()}], context = ()},
                                                Node
                                                  { tag = Scope,
                                                    children =
                                                      [ Node {tag = Statement, children = [Node {tag = GateCallStmt, children = [NilNode, Node {tag = Identifier {identifierName = "h", identifierTok = IdentifierToken "h"}, children = [], context = ()}, NilNode, NilNode, Node {tag = List, children = [Node {tag = IndexedIdentifier, children = [Node {tag = Identifier {identifierName = "ancilla", identifierTok = IdentifierToken "ancilla"}, children = [], context = ()}, Node {tag = List, children = [Node {tag = BinaryOperatorExpr {binaryOp = PlusToken}, children = [Node {tag = ParenExpr, children = [Node {tag = BinaryOperatorExpr {binaryOp = PlusToken}, children = [Node {tag = ParenExpr, children = [Node {tag = BinaryOperatorExpr {binaryOp = DoubleAsteriskToken}, children = [Node {tag = ParenExpr, children = [Node {tag = BinaryOperatorExpr {binaryOp = MinusToken}, children = [Node {tag = Identifier {identifierName = "d", identifierTok = IdentifierToken "d"}, children = [], context = ()}, Node {tag = IntegerLiteral {integerVal = 1, integerTok = DecimalIntegerLiteralToken "1"}, children = [], context = ()}], context = ()}], context = ()}, Node {tag = IntegerLiteral {integerVal = 2, integerTok = DecimalIntegerLiteralToken "2"}, children = [], context = ()}], context = ()}], context = ()}, Node {tag = ParenExpr, children = [Node {tag = BinaryOperatorExpr {binaryOp = MinusToken}, children = [Node {tag = Identifier {identifierName = "d", identifierTok = IdentifierToken "d"}, children = [], context = ()}, Node {tag = IntegerLiteral {integerVal = 1, integerTok = DecimalIntegerLiteralToken "1"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}, Node {tag = Identifier {identifierName = "i", identifierTok = IdentifierToken "i"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}
                                                      ],
                                                    context = ()
                                                  }
                                              ],
                                            context = ()
                                          }
                                      ],
                                    context = ()
                                  }
                              ],
                            context = ()
                          }
                      ],
                    context = ()
                  }
              ],
            context = ()
          },
        Node
          { tag = Statement,
            children =
              [ Node
                  { tag = DefStmt,
                    children =
                      [ Node {tag = Identifier {identifierName = "cycle", identifierTok = IdentifierToken "cycle"}, children = [], context = ()},
                        Node {tag = List, children = [Node {tag = ArgumentDefinition, children = [Node {tag = QubitTypeSpec, children = [Node {tag = Identifier {identifierName = "n", identifierTok = IdentifierToken "n"}, children = [], context = ()}], context = ()}, Node {tag = Identifier {identifierName = "data", identifierTok = IdentifierToken "data"}, children = [], context = ()}], context = ()}, Node {tag = ArgumentDefinition, children = [Node {tag = QubitTypeSpec, children = [Node {tag = BinaryOperatorExpr {binaryOp = MinusToken}, children = [Node {tag = Identifier {identifierName = "n", identifierTok = IdentifierToken "n"}, children = [], context = ()}, Node {tag = IntegerLiteral {integerVal = 1, integerTok = DecimalIntegerLiteralToken "1"}, children = [], context = ()}], context = ()}], context = ()}, Node {tag = Identifier {identifierName = "ancilla", identifierTok = IdentifierToken "ancilla"}, children = [], context = ()}], context = ()}], context = ()},
                        Node {tag = BitTypeSpec, children = [Node {tag = BinaryOperatorExpr {binaryOp = MinusToken}, children = [Node {tag = Identifier {identifierName = "n", identifierTok = IdentifierToken "n"}, children = [], context = ()}, Node {tag = IntegerLiteral {integerVal = 1, integerTok = DecimalIntegerLiteralToken "1"}, children = [], context = ()}], context = ()}], context = ()},
                        Node
                          { tag = Scope,
                            children =
                              [ Node {tag = Statement, children = [Node {tag = ResetStmt, children = [Node {tag = Identifier {identifierName = "ancilla", identifierTok = IdentifierToken "ancilla"}, children = [], context = ()}], context = ()}], context = ()},
                                Node {tag = Statement, children = [Node {tag = GateCallStmt, children = [NilNode, Node {tag = Identifier {identifierName = "hadamard_layer", identifierTok = IdentifierToken "hadamard_layer"}, children = [], context = ()}, NilNode, NilNode, Node {tag = List, children = [Node {tag = Identifier {identifierName = "ancilla", identifierTok = IdentifierToken "ancilla"}, children = [], context = ()}], context = ()}], context = ()}], context = ()},
                                Node
                                  { tag = Statement,
                                    children =
                                      [ Node
                                          { tag = ForStmt,
                                            children =
                                              [ Node {tag = UintTypeSpec, children = [Node {tag = IntegerLiteral {integerVal = 32, integerTok = DecimalIntegerLiteralToken "32"}, children = [], context = ()}], context = ()},
                                                Node {tag = Identifier {identifierName = "row", identifierTok = IdentifierToken "row"}, children = [], context = ()},
                                                Node {tag = RangeInitExpr, children = [Node {tag = IntegerLiteral {integerVal = 0, integerTok = DecimalIntegerLiteralToken "0"}, children = [], context = ()}, NilNode, Node {tag = BinaryOperatorExpr {binaryOp = MinusToken}, children = [Node {tag = Identifier {identifierName = "d", identifierTok = IdentifierToken "d"}, children = [], context = ()}, Node {tag = IntegerLiteral {integerVal = 2, integerTok = DecimalIntegerLiteralToken "2"}, children = [], context = ()}], context = ()}], context = ()},
                                                Node
                                                  { tag = Scope,
                                                    children =
                                                      [ Node
                                                          { tag = Statement,
                                                            children =
                                                              [ Node
                                                                  { tag = ForStmt,
                                                                    children =
                                                                      [ Node {tag = UintTypeSpec, children = [Node {tag = IntegerLiteral {integerVal = 32, integerTok = DecimalIntegerLiteralToken "32"}, children = [], context = ()}], context = ()},
                                                                        Node {tag = Identifier {identifierName = "col", identifierTok = IdentifierToken "col"}, children = [], context = ()},
                                                                        Node {tag = RangeInitExpr, children = [Node {tag = IntegerLiteral {integerVal = 0, integerTok = DecimalIntegerLiteralToken "0"}, children = [], context = ()}, NilNode, Node {tag = BinaryOperatorExpr {binaryOp = MinusToken}, children = [Node {tag = Identifier {identifierName = "d", identifierTok = IdentifierToken "d"}, children = [], context = ()}, Node {tag = IntegerLiteral {integerVal = 2, integerTok = DecimalIntegerLiteralToken "2"}, children = [], context = ()}], context = ()}], context = ()},
                                                                        Node
                                                                          { tag = Scope,
                                                                            children =
                                                                              [ Node {tag = Statement, children = [Node {tag = ClassicalDeclStmt, children = [Node {tag = BitTypeSpec, children = [Node {tag = IntegerLiteral {integerVal = 32, integerTok = DecimalIntegerLiteralToken "32"}, children = [], context = ()}], context = ()}, Node {tag = Identifier {identifierName = "sum", identifierTok = IdentifierToken "sum"}, children = [], context = ()}, Node {tag = CastExpr, children = [Node {tag = BitTypeSpec, children = [Node {tag = IntegerLiteral {integerVal = 32, integerTok = DecimalIntegerLiteralToken "32"}, children = [], context = ()}], context = ()}, Node {tag = BinaryOperatorExpr {binaryOp = PlusToken}, children = [Node {tag = Identifier {identifierName = "row", identifierTok = IdentifierToken "row"}, children = [], context = ()}, Node {tag = Identifier {identifierName = "col", identifierTok = IdentifierToken "col"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}], context = ()},
                                                                                Node {tag = Statement, children = [Node {tag = IfStmt, children = [Node {tag = BinaryOperatorExpr {binaryOp = DoubleEqualsToken}, children = [Node {tag = ParenExpr, children = [Node {tag = IndexExpr, children = [Node {tag = Identifier {identifierName = "sum", identifierTok = IdentifierToken "sum"}, children = [], context = ()}, Node {tag = List, children = [Node {tag = IntegerLiteral {integerVal = 0, integerTok = DecimalIntegerLiteralToken "0"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}, Node {tag = IntegerLiteral {integerVal = 0, integerTok = DecimalIntegerLiteralToken "0"}, children = [], context = ()}], context = ()}, Node {tag = Statement, children = [Node {tag = GateCallStmt, children = [NilNode, Node {tag = Identifier {identifierName = "cx", identifierTok = IdentifierToken "cx"}, children = [], context = ()}, NilNode, NilNode, Node {tag = List, children = [Node {tag = IndexedIdentifier, children = [Node {tag = Identifier {identifierName = "data", identifierTok = IdentifierToken "data"}, children = [], context = ()}, Node {tag = List, children = [Node {tag = BinaryOperatorExpr {binaryOp = PlusToken}, children = [Node {tag = ParenExpr, children = [Node {tag = BinaryOperatorExpr {binaryOp = AsteriskToken}, children = [Node {tag = Identifier {identifierName = "row", identifierTok = IdentifierToken "row"}, children = [], context = ()}, Node {tag = Identifier {identifierName = "d", identifierTok = IdentifierToken "d"}, children = [], context = ()}], context = ()}], context = ()}, Node {tag = Identifier {identifierName = "col", identifierTok = IdentifierToken "col"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}, Node {tag = IndexedIdentifier, children = [Node {tag = Identifier {identifierName = "ancilla", identifierTok = IdentifierToken "ancilla"}, children = [], context = ()}, Node {tag = List, children = [Node {tag = BinaryOperatorExpr {binaryOp = PlusToken}, children = [Node {tag = ParenExpr, children = [Node {tag = BinaryOperatorExpr {binaryOp = AsteriskToken}, children = [Node {tag = Identifier {identifierName = "row", identifierTok = IdentifierToken "row"}, children = [], context = ()}, Node {tag = ParenExpr, children = [Node {tag = BinaryOperatorExpr {binaryOp = MinusToken}, children = [Node {tag = Identifier {identifierName = "d", identifierTok = IdentifierToken "d"}, children = [], context = ()}, Node {tag = IntegerLiteral {integerVal = 1, integerTok = DecimalIntegerLiteralToken "1"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}, Node {tag = Identifier {identifierName = "col", identifierTok = IdentifierToken "col"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}, NilNode], context = ()}], context = ()},
                                                                                Node
                                                                                  { tag = Statement,
                                                                                    children =
                                                                                      [ Node
                                                                                          { tag = IfStmt,
                                                                                            children =
                                                                                              [ Node {tag = BinaryOperatorExpr {binaryOp = DoubleEqualsToken}, children = [Node {tag = ParenExpr, children = [Node {tag = IndexExpr, children = [Node {tag = Identifier {identifierName = "sum", identifierTok = IdentifierToken "sum"}, children = [], context = ()}, Node {tag = List, children = [Node {tag = IntegerLiteral {integerVal = 0, integerTok = DecimalIntegerLiteralToken "0"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}, Node {tag = IntegerLiteral {integerVal = 1, integerTok = DecimalIntegerLiteralToken "1"}, children = [], context = ()}], context = ()},
                                                                                                Node
                                                                                                  { tag = Scope,
                                                                                                    children =
                                                                                                      [ Node {tag = Statement, children = [Node {tag = GateCallStmt, children = [NilNode, Node {tag = Identifier {identifierName = "cx", identifierTok = IdentifierToken "cx"}, children = [], context = ()}, NilNode, NilNode, Node {tag = List, children = [Node {tag = IndexedIdentifier, children = [Node {tag = Identifier {identifierName = "ancilla", identifierTok = IdentifierToken "ancilla"}, children = [], context = ()}, Node {tag = List, children = [Node {tag = BinaryOperatorExpr {binaryOp = PlusToken}, children = [Node {tag = ParenExpr, children = [Node {tag = BinaryOperatorExpr {binaryOp = AsteriskToken}, children = [Node {tag = Identifier {identifierName = "row", identifierTok = IdentifierToken "row"}, children = [], context = ()}, Node {tag = ParenExpr, children = [Node {tag = BinaryOperatorExpr {binaryOp = MinusToken}, children = [Node {tag = Identifier {identifierName = "d", identifierTok = IdentifierToken "d"}, children = [], context = ()}, Node {tag = IntegerLiteral {integerVal = 1, integerTok = DecimalIntegerLiteralToken "1"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}, Node {tag = Identifier {identifierName = "col", identifierTok = IdentifierToken "col"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}, Node {tag = IndexedIdentifier, children = [Node {tag = Identifier {identifierName = "data", identifierTok = IdentifierToken "data"}, children = [], context = ()}, Node {tag = List, children = [Node {tag = BinaryOperatorExpr {binaryOp = PlusToken}, children = [Node {tag = ParenExpr, children = [Node {tag = BinaryOperatorExpr {binaryOp = AsteriskToken}, children = [Node {tag = Identifier {identifierName = "row", identifierTok = IdentifierToken "row"}, children = [], context = ()}, Node {tag = Identifier {identifierName = "d", identifierTok = IdentifierToken "d"}, children = [], context = ()}], context = ()}], context = ()}, Node {tag = Identifier {identifierName = "col", identifierTok = IdentifierToken "col"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}
                                                                                                      ],
                                                                                                    context = ()
                                                                                                  },
                                                                                                NilNode
                                                                                              ],
                                                                                            context = ()
                                                                                          }
                                                                                      ],
                                                                                    context = ()
                                                                                  }
                                                                              ],
                                                                            context = ()
                                                                          }
                                                                      ],
                                                                    context = ()
                                                                  }
                                                              ],
                                                            context = ()
                                                          }
                                                      ],
                                                    context = ()
                                                  }
                                              ],
                                            context = ()
                                          }
                                      ],
                                    context = ()
                                  },
                                Node
                                  { tag = Statement,
                                    children =
                                      [ Node
                                          { tag = ForStmt,
                                            children =
                                              [ Node {tag = UintTypeSpec, children = [Node {tag = IntegerLiteral {integerVal = 32, integerTok = DecimalIntegerLiteralToken "32"}, children = [], context = ()}], context = ()},
                                                Node {tag = Identifier {identifierName = "i", identifierTok = IdentifierToken "i"}, children = [], context = ()},
                                                Node {tag = RangeInitExpr, children = [Node {tag = IntegerLiteral {integerVal = 0, integerTok = DecimalIntegerLiteralToken "0"}, children = [], context = ()}, NilNode, Node {tag = BinaryOperatorExpr {binaryOp = SlashToken}, children = [Node {tag = ParenExpr, children = [Node {tag = BinaryOperatorExpr {binaryOp = MinusToken}, children = [Node {tag = Identifier {identifierName = "d", identifierTok = IdentifierToken "d"}, children = [], context = ()}, Node {tag = IntegerLiteral {integerVal = 3, integerTok = DecimalIntegerLiteralToken "3"}, children = [], context = ()}], context = ()}], context = ()}, Node {tag = IntegerLiteral {integerVal = 2, integerTok = DecimalIntegerLiteralToken "2"}, children = [], context = ()}], context = ()}], context = ()},
                                                Node
                                                  { tag = Scope,
                                                    children =
                                                      [ Node {tag = Statement, children = [Node {tag = GateCallStmt, children = [NilNode, Node {tag = Identifier {identifierName = "cx", identifierTok = IdentifierToken "cx"}, children = [], context = ()}, NilNode, NilNode, Node {tag = List, children = [Node {tag = IndexedIdentifier, children = [Node {tag = Identifier {identifierName = "data", identifierTok = IdentifierToken "data"}, children = [], context = ()}, Node {tag = List, children = [Node {tag = BinaryOperatorExpr {binaryOp = PlusToken}, children = [Node {tag = ParenExpr, children = [Node {tag = BinaryOperatorExpr {binaryOp = AsteriskToken}, children = [Node {tag = Identifier {identifierName = "d", identifierTok = IdentifierToken "d"}, children = [], context = ()}, Node {tag = ParenExpr, children = [Node {tag = BinaryOperatorExpr {binaryOp = MinusToken}, children = [Node {tag = Identifier {identifierName = "d", identifierTok = IdentifierToken "d"}, children = [], context = ()}, Node {tag = IntegerLiteral {integerVal = 1, integerTok = DecimalIntegerLiteralToken "1"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}, Node {tag = ParenExpr, children = [Node {tag = BinaryOperatorExpr {binaryOp = AsteriskToken}, children = [Node {tag = IntegerLiteral {integerVal = 2, integerTok = DecimalIntegerLiteralToken "2"}, children = [], context = ()}, Node {tag = Identifier {identifierName = "i", identifierTok = IdentifierToken "i"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}, Node {tag = IndexedIdentifier, children = [Node {tag = Identifier {identifierName = "ancilla", identifierTok = IdentifierToken "ancilla"}, children = [], context = ()}, Node {tag = List, children = [Node {tag = BinaryOperatorExpr {binaryOp = PlusToken}, children = [Node {tag = ParenExpr, children = [Node {tag = BinaryOperatorExpr {binaryOp = PlusToken}, children = [Node {tag = ParenExpr, children = [Node {tag = BinaryOperatorExpr {binaryOp = DoubleAsteriskToken}, children = [Node {tag = ParenExpr, children = [Node {tag = BinaryOperatorExpr {binaryOp = MinusToken}, children = [Node {tag = Identifier {identifierName = "d", identifierTok = IdentifierToken "d"}, children = [], context = ()}, Node {tag = IntegerLiteral {integerVal = 1, integerTok = DecimalIntegerLiteralToken "1"}, children = [], context = ()}], context = ()}], context = ()}, Node {tag = IntegerLiteral {integerVal = 2, integerTok = DecimalIntegerLiteralToken "2"}, children = [], context = ()}], context = ()}], context = ()}, Node {tag = ParenExpr, children = [Node {tag = BinaryOperatorExpr {binaryOp = SlashToken}, children = [Node {tag = ParenExpr, children = [Node {tag = BinaryOperatorExpr {binaryOp = MinusToken}, children = [Node {tag = Identifier {identifierName = "d", identifierTok = IdentifierToken "d"}, children = [], context = ()}, Node {tag = IntegerLiteral {integerVal = 1, integerTok = DecimalIntegerLiteralToken "1"}, children = [], context = ()}], context = ()}], context = ()}, Node {tag = IntegerLiteral {integerVal = 2, integerTok = DecimalIntegerLiteralToken "2"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}, Node {tag = Identifier {identifierName = "i", identifierTok = IdentifierToken "i"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}
                                                      ],
                                                    context = ()
                                                  }
                                              ],
                                            context = ()
                                          }
                                      ],
                                    context = ()
                                  },
                                Node
                                  { tag = Statement,
                                    children =
                                      [ Node
                                          { tag = ForStmt,
                                            children =
                                              [ Node {tag = UintTypeSpec, children = [Node {tag = IntegerLiteral {integerVal = 32, integerTok = DecimalIntegerLiteralToken "32"}, children = [], context = ()}], context = ()},
                                                Node {tag = Identifier {identifierName = "i", identifierTok = IdentifierToken "i"}, children = [], context = ()},
                                                Node {tag = RangeInitExpr, children = [Node {tag = IntegerLiteral {integerVal = 0, integerTok = DecimalIntegerLiteralToken "0"}, children = [], context = ()}, NilNode, Node {tag = BinaryOperatorExpr {binaryOp = SlashToken}, children = [Node {tag = ParenExpr, children = [Node {tag = BinaryOperatorExpr {binaryOp = MinusToken}, children = [Node {tag = Identifier {identifierName = "d", identifierTok = IdentifierToken "d"}, children = [], context = ()}, Node {tag = IntegerLiteral {integerVal = 3, integerTok = DecimalIntegerLiteralToken "3"}, children = [], context = ()}], context = ()}], context = ()}, Node {tag = IntegerLiteral {integerVal = 2, integerTok = DecimalIntegerLiteralToken "2"}, children = [], context = ()}], context = ()}], context = ()},
                                                Node
                                                  { tag = Scope,
                                                    children =
                                                      [ Node {tag = Statement, children = [Node {tag = GateCallStmt, children = [NilNode, Node {tag = Identifier {identifierName = "cx", identifierTok = IdentifierToken "cx"}, children = [], context = ()}, NilNode, NilNode, Node {tag = List, children = [Node {tag = IndexedIdentifier, children = [Node {tag = Identifier {identifierName = "ancilla", identifierTok = IdentifierToken "ancilla"}, children = [], context = ()}, Node {tag = List, children = [Node {tag = BinaryOperatorExpr {binaryOp = PlusToken}, children = [Node {tag = ParenExpr, children = [Node {tag = BinaryOperatorExpr {binaryOp = PlusToken}, children = [Node {tag = ParenExpr, children = [Node {tag = BinaryOperatorExpr {binaryOp = DoubleAsteriskToken}, children = [Node {tag = ParenExpr, children = [Node {tag = BinaryOperatorExpr {binaryOp = MinusToken}, children = [Node {tag = Identifier {identifierName = "d", identifierTok = IdentifierToken "d"}, children = [], context = ()}, Node {tag = IntegerLiteral {integerVal = 1, integerTok = DecimalIntegerLiteralToken "1"}, children = [], context = ()}], context = ()}], context = ()}, Node {tag = IntegerLiteral {integerVal = 2, integerTok = DecimalIntegerLiteralToken "2"}, children = [], context = ()}], context = ()}], context = ()}, Node {tag = ParenExpr, children = [Node {tag = BinaryOperatorExpr {binaryOp = SlashToken}, children = [Node {tag = ParenExpr, children = [Node {tag = BinaryOperatorExpr {binaryOp = AsteriskToken}, children = [Node {tag = IntegerLiteral {integerVal = 3, integerTok = DecimalIntegerLiteralToken "3"}, children = [], context = ()}, Node {tag = ParenExpr, children = [Node {tag = BinaryOperatorExpr {binaryOp = MinusToken}, children = [Node {tag = Identifier {identifierName = "d", identifierTok = IdentifierToken "d"}, children = [], context = ()}, Node {tag = IntegerLiteral {integerVal = 1, integerTok = DecimalIntegerLiteralToken "1"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}, Node {tag = IntegerLiteral {integerVal = 2, integerTok = DecimalIntegerLiteralToken "2"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}, Node {tag = Identifier {identifierName = "i", identifierTok = IdentifierToken "i"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}, Node {tag = IndexedIdentifier, children = [Node {tag = Identifier {identifierName = "data", identifierTok = IdentifierToken "data"}, children = [], context = ()}, Node {tag = List, children = [Node {tag = BinaryOperatorExpr {binaryOp = PlusToken}, children = [Node {tag = ParenExpr, children = [Node {tag = BinaryOperatorExpr {binaryOp = MinusToken}, children = [Node {tag = ParenExpr, children = [Node {tag = BinaryOperatorExpr {binaryOp = AsteriskToken}, children = [Node {tag = IntegerLiteral {integerVal = 2, integerTok = DecimalIntegerLiteralToken "2"}, children = [], context = ()}, Node {tag = Identifier {identifierName = "d", identifierTok = IdentifierToken "d"}, children = [], context = ()}], context = ()}], context = ()}, Node {tag = IntegerLiteral {integerVal = 1, integerTok = DecimalIntegerLiteralToken "1"}, children = [], context = ()}], context = ()}], context = ()}, Node {tag = ParenExpr, children = [Node {tag = BinaryOperatorExpr {binaryOp = AsteriskToken}, children = [Node {tag = ParenExpr, children = [Node {tag = BinaryOperatorExpr {binaryOp = AsteriskToken}, children = [Node {tag = IntegerLiteral {integerVal = 2, integerTok = DecimalIntegerLiteralToken "2"}, children = [], context = ()}, Node {tag = Identifier {identifierName = "d", identifierTok = IdentifierToken "d"}, children = [], context = ()}], context = ()}], context = ()}, Node {tag = Identifier {identifierName = "i", identifierTok = IdentifierToken "i"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}
                                                      ],
                                                    context = ()
                                                  }
                                              ],
                                            context = ()
                                          }
                                      ],
                                    context = ()
                                  },
                                Node {tag = Statement, children = [Node {tag = GateCallStmt, children = [NilNode, Node {tag = Identifier {identifierName = "hadamard_layer", identifierTok = IdentifierToken "hadamard_layer"}, children = [], context = ()}, NilNode, NilNode, Node {tag = List, children = [Node {tag = Identifier {identifierName = "ancilla", identifierTok = IdentifierToken "ancilla"}, children = [], context = ()}], context = ()}], context = ()}], context = ()},
                                Node {tag = Statement, children = [Node {tag = ReturnStmt, children = [Node {tag = MeasureExpr, children = [Node {tag = Identifier {identifierName = "ancilla", identifierTok = IdentifierToken "ancilla"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}
                              ],
                            context = ()
                          }
                      ],
                    context = ()
                  }
              ],
            context = ()
          },
        Node
          { tag = Statement,
            children =
              [ Node
                  { tag = ForStmt,
                    children =
                      [ Node {tag = UintTypeSpec, children = [Node {tag = IntegerLiteral {integerVal = 32, integerTok = DecimalIntegerLiteralToken "32"}, children = [], context = ()}], context = ()},
                        Node {tag = Identifier {identifierName = "shot", identifierTok = IdentifierToken "shot"}, children = [], context = ()},
                        Node {tag = RangeInitExpr, children = [Node {tag = IntegerLiteral {integerVal = 1, integerTok = DecimalIntegerLiteralToken "1"}, children = [], context = ()}, NilNode, Node {tag = Identifier {identifierName = "shots", identifierTok = IdentifierToken "shots"}, children = [], context = ()}], context = ()},
                        Node
                          { tag = Scope,
                            children =
                              [ Node {tag = Statement, children = [Node {tag = ResetStmt, children = [Node {tag = Identifier {identifierName = "data", identifierTok = IdentifierToken "data"}, children = [], context = ()}], context = ()}], context = ()},
                                Node {tag = Statement, children = [Node {tag = AssignmentStmt {assignmentOpTok = EqualsToken}, children = [Node {tag = Identifier {identifierName = "layer", identifierTok = IdentifierToken "layer"}, children = [], context = ()}, Node {tag = CallExpr, children = [Node {tag = Identifier {identifierName = "cycle", identifierTok = IdentifierToken "cycle"}, children = [], context = ()}, Node {tag = List, children = [Node {tag = Identifier {identifierName = "data", identifierTok = IdentifierToken "data"}, children = [], context = ()}, Node {tag = Identifier {identifierName = "ancilla", identifierTok = IdentifierToken "ancilla"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}], context = ()},
                                Node {tag = Statement, children = [Node {tag = ExpressionStmt, children = [Node {tag = CallExpr, children = [Node {tag = Identifier {identifierName = "zfirst", identifierTok = IdentifierToken "zfirst"}, children = [], context = ()}, Node {tag = List, children = [Node {tag = Identifier {identifierName = "layer", identifierTok = IdentifierToken "layer"}, children = [], context = ()}, Node {tag = Identifier {identifierName = "shot", identifierTok = IdentifierToken "shot"}, children = [], context = ()}, Node {tag = Identifier {identifierName = "d", identifierTok = IdentifierToken "d"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}], context = ()},
                                Node
                                  { tag = Statement,
                                    children =
                                      [ Node
                                          { tag = ForStmt,
                                            children =
                                              [ Node {tag = IntTypeSpec, children = [Node {tag = IntegerLiteral {integerVal = 32, integerTok = DecimalIntegerLiteralToken "32"}, children = [], context = ()}], context = ()},
                                                Node {tag = Identifier {identifierName = "i", identifierTok = IdentifierToken "i"}, children = [], context = ()},
                                                Node {tag = RangeInitExpr, children = [Node {tag = IntegerLiteral {integerVal = 1, integerTok = DecimalIntegerLiteralToken "1"}, children = [], context = ()}, NilNode, Node {tag = Identifier {identifierName = "m", identifierTok = IdentifierToken "m"}, children = [], context = ()}], context = ()},
                                                Node
                                                  { tag = Scope,
                                                    children =
                                                      [ Node {tag = Statement, children = [Node {tag = AssignmentStmt {assignmentOpTok = EqualsToken}, children = [Node {tag = Identifier {identifierName = "layer", identifierTok = IdentifierToken "layer"}, children = [], context = ()}, Node {tag = CallExpr, children = [Node {tag = Identifier {identifierName = "cycle", identifierTok = IdentifierToken "cycle"}, children = [], context = ()}, Node {tag = List, children = [Node {tag = Identifier {identifierName = "data", identifierTok = IdentifierToken "data"}, children = [], context = ()}, Node {tag = Identifier {identifierName = "ancilla", identifierTok = IdentifierToken "ancilla"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}], context = ()},
                                                        Node {tag = Statement, children = [Node {tag = ExpressionStmt, children = [Node {tag = CallExpr, children = [Node {tag = Identifier {identifierName = "send", identifierTok = IdentifierToken "send"}, children = [], context = ()}, Node {tag = List, children = [Node {tag = Identifier {identifierName = "layer", identifierTok = IdentifierToken "layer"}, children = [], context = ()}, Node {tag = Identifier {identifierName = "shot", identifierTok = IdentifierToken "shot"}, children = [], context = ()}, Node {tag = Identifier {identifierName = "i", identifierTok = IdentifierToken "i"}, children = [], context = ()}, Node {tag = Identifier {identifierName = "d", identifierTok = IdentifierToken "d"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}], context = ()}
                                                      ],
                                                    context = ()
                                                  }
                                              ],
                                            context = ()
                                          }
                                      ],
                                    context = ()
                                  },
                                Node {tag = Statement, children = [Node {tag = AssignmentStmt {assignmentOpTok = EqualsToken}, children = [Node {tag = Identifier {identifierName = "data_outcomes", identifierTok = IdentifierToken "data_outcomes"}, children = [], context = ()}, Node {tag = MeasureExpr, children = [Node {tag = Identifier {identifierName = "data", identifierTok = IdentifierToken "data"}, children = [], context = ()}], context = ()}], context = ()}], context = ()},
                                Node {tag = Statement, children = [Node {tag = AssignmentStmt {assignmentOpTok = EqualsToken}, children = [Node {tag = Identifier {identifierName = "outcome", identifierTok = IdentifierToken "outcome"}, children = [], context = ()}, Node {tag = CallExpr, children = [Node {tag = Identifier {identifierName = "zlast", identifierTok = IdentifierToken "zlast"}, children = [], context = ()}, Node {tag = List, children = [Node {tag = Identifier {identifierName = "data_outcomes", identifierTok = IdentifierToken "data_outcomes"}, children = [], context = ()}, Node {tag = Identifier {identifierName = "shot", identifierTok = IdentifierToken "shot"}, children = [], context = ()}, Node {tag = Identifier {identifierName = "d", identifierTok = IdentifierToken "d"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}], context = ()},
                                Node {tag = Statement, children = [Node {tag = AssignmentStmt {assignmentOpTok = PlusEqualsToken}, children = [Node {tag = Identifier {identifierName = "failures", identifierTok = IdentifierToken "failures"}, children = [], context = ()}, Node {tag = CastExpr, children = [Node {tag = IntTypeSpec, children = [Node {tag = IntegerLiteral {integerVal = 1, integerTok = DecimalIntegerLiteralToken "1"}, children = [], context = ()}], context = ()}, Node {tag = Identifier {identifierName = "outcome", identifierTok = IdentifierToken "outcome"}, children = [], context = ()}], context = ()}], context = ()}], context = ()}
                              ],
                            context = ()
                          }
                      ],
                    context = ()
                  }
              ],
            context = ()
          }
      ],
    context = ()
  }
