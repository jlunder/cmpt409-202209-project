module Main where

import Qasm3To2
import qualified System.Exit as Exit
import Test.HUnit

tests =
  TestList
    [ -- math with wrong types
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Plus (CBool True) (CInt 2)) "Type Error",
      TestLabel "test2" $ TestCase $ assertEqual "test" (typeInfer $ Plus (CInt 1) (CBool True)) "Type Error",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Plus (CBool True) (CBool False)) "Type Error",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Minus (CBool True) (CInt 2)) "Type Error",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Minus (CInt 1) (CBool True)) "Type Error",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Minus (CBool True) (CBool False)) "Type Error",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Equal (CBool True) (CInt 1)) "Type Error",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Equal (CInt 1) (CBool True)) "Type Error",
      -- more math
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Minus (CInt 1) (CInt 2)) "TInt",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Equal (CInt 1) (CInt 2)) "TBool",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Equal (CBool True) (CBool True)) "TBool",
      -- apply, abstract to wrong type
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ App (Abs "x" (Var "x")) (CBool True)) "TBool",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Abs "x" (Equal (Var "x") (CBool True))) "TArr TBool TBool",
      -- more apply
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Abs "x" (Plus (Var "x") (CInt 1))) "TArr TInt TInt",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ App (Abs "x" (App (Var "x") (CInt 3))) (Abs "x" (Plus (Var "x") (CInt 1)))) "TInt",
      -- recursive apply
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Abs "x" (App (Var "x") (Var "x"))) "Type Error",
      -- ITE with non bool condition
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ ITE (CInt 1) (CInt 1) (CInt 2)) "Type Error",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ ITE (Abs "x" (Plus (Var "x") (CInt 1))) (CInt 1) (CInt 2)) "Type Error",
      -- ITE with non matching results
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ ITE (CBool True) (CInt 1) (CBool True)) "Type Error",
      -- abstraction with error type
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Abs "x" (Equal (CInt 1) (CBool True))) "Type Error",
      -- P3 test cases
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Abs "x" (Var "x")) "TArr (TVar 1) (TVar 1)",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Abs "x" (Abs "y" (Equal (Var "x") (Var "y")))) "TArr (TVar 1) (TArr (TVar 1) TBool)",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Abs "x" (Plus (Var "x") (CInt 1))) "TArr TInt TInt",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Abs "x" (Var "x")) "TArr (TVar 1) (TVar 1)",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Abs "x" (Abs "y" (Equal (Var "x") (Var "y")))) "TArr (TVar 1) (TArr (TVar 1) TBool)",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Abs "x" (Abs "y" (Equal (Var "x") (Var "y")))) "TArr (TVar 1) (TArr (TVar 1) TBool)",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Abs "x" (CBool True)) "TArr (TVar 1) TBool",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Abs "x" (CInt 1)) "TArr (TVar 1) TInt",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Abs "x" (Equal (Var "x") (CBool True))) "TArr TBool TBool",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Abs "x" (Equal (Var "x") (CInt 1))) "TArr TInt TBool",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Abs "x" (Plus (Var "x") (CInt 1))) "TArr TInt TInt",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Abs "x" (Var "x")) "TArr (TVar 1) (TVar 1)",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Abs "x" (Abs "y" (Equal (Var "x") (Var "y")))) "TArr (TVar 1) (TArr (TVar 1) TBool)",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Abs "x" (Abs "y" (Var "x"))) "TArr (TVar 1) (TArr (TVar 2) (TVar 1))",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Abs "x" (Abs "y" (Var "y"))) "TArr (TVar 1) (TArr (TVar 2) (TVar 2))",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Abs "x" (Abs "y" (Equal (Var "x") (Var "y")))) "TArr (TVar 1) (TArr (TVar 1) TBool)",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Abs "x" (Abs "y" (Plus (Var "x") (Var "y")))) "TArr TInt (TArr TInt TInt)",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Abs "x" (CBool True)) "TArr (TVar 1) TBool",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Abs "x" (CInt 1)) "TArr (TVar 1) TInt",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Abs "x" (Equal (Var "x") (CBool True))) "TArr TBool TBool",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Abs "x" (Equal (Var "x") (CInt 1))) "TArr TInt TBool",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Abs "x" (Plus (Var "x") (CInt 1))) "TArr TInt TInt",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Abs "x" (Var "x")) "TArr (TVar 1) (TVar 1)",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ App (Abs "x" (Var "x")) (Abs "x" (Var "x"))) "TArr (TVar 1) (TVar 1)",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ App (Abs "x" (Var "x")) (Abs "x" (Var "x"))) "TArr (TVar 1) (TVar 1)",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ App (Abs "x" (Var "x")) (Abs "x" (Var "x"))) "TArr (TVar 1) (TVar 1)",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ App (Abs "x" (CBool True)) (CInt 1)) "TBool",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ App (Abs "x" (CInt 1)) (CInt 1)) "TInt",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ App (Abs "x" (Var "x")) (CInt 1)) "TInt",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ App (Abs "x" (Abs "y" (Var "x"))) (CBool True)) "TArr (TVar 1) TBool",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ App (Abs "x" (Abs "y" (Var "x"))) (CInt 1)) "TArr (TVar 1) TInt",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ App (Abs "x" (Abs "y" (Var "y"))) (CBool True)) "TArr (TVar 1) (TVar 1)",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ App (Abs "x" (Abs "y" (Var "y"))) (CInt 1)) "TArr (TVar 1) (TVar 1)",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ App (Abs "x" (Abs "y" (Equal (Var "x") (Var "y")))) (CBool True)) "TArr TBool TBool",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ App (Abs "x" (Abs "y" (Equal (Var "x") (Var "y")))) (CInt 1)) "TArr TInt TBool",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ App (Abs "x" (Abs "y" (Plus (Var "x") (Var "y")))) (CBool True)) "Type Error",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ App (Abs "x" (Abs "y" (Plus (Var "x") (Var "y")))) (CInt 1)) "TArr TInt TInt",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ App (Abs "x" (CBool True)) (CBool True)) "TBool",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ App (Abs "x" (CBool True)) (CInt 1)) "TBool",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ App (Abs "x" (CBool True)) (Plus (CInt 1) (CInt 2))) "TBool",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ App (Abs "x" (CInt 1)) (CBool True)) "TInt",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ App (Abs "x" (CInt 1)) (CInt 1)) "TInt",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ App (Abs "x" (CInt 1)) (Plus (CInt 1) (CInt 2))) "TInt",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ App (Abs "x" (Var "x")) (CBool True)) "TBool",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ App (Abs "x" (Var "x")) (CInt 1)) "TInt",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ App (Abs "x" (Var "x")) (Plus (CInt 1) (CInt 2))) "TInt",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ App (App (Abs "x" (Abs "y" (Var "x"))) (CInt 1)) (CBool True)) "TInt",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ App (App (Abs "x" (Abs "y" (Var "x"))) (CInt 1)) (CInt 1)) "TInt",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ App (App (Abs "x" (Abs "y" (Var "y"))) (CInt 1)) (CBool True)) "TBool",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ App (App (Abs "x" (Abs "y" (Var "y"))) (CInt 1)) (CInt 1)) "TInt",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ App (App (Abs "x" (Abs "y" (Equal (Var "x") (Var "y")))) (CInt 1)) (CBool False)) "Type Error",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ App (App (Abs "x" (Abs "y" (Equal (Var "x") (Var "y")))) (CInt 1)) (CInt 2)) "TBool",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ App (App (Abs "x" (Abs "y" (Plus (Var "x") (Var "y")))) (CInt 1)) (CBool False)) "Type Error",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ App (App (Abs "x" (Abs "y" (Plus (Var "x") (Var "y")))) (CInt 1)) (CInt 2)) "TInt",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ CBool False) "TBool",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ CBool True) "TBool",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ CInt (-1)) "TInt",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ CInt 0) "TInt",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ CInt 1) "TInt",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Equal (Abs "x" (Var "x")) (Abs "x" (Var "x"))) "TBool",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Equal (Abs "x" (Var "x")) (CBool True)) "Type Error",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Equal (Abs "x" (Var "x")) (CInt 0)) "Type Error",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Equal (CBool False) (CInt 0)) "Type Error",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Equal (CBool False) (Equal (CInt 1) (CInt 2))) "TBool",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Equal (CBool True) (CBool False)) "TBool",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Equal (CBool True) (CBool True)) "TBool",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Equal (CInt 1) (CBool True)) "Type Error",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Equal (CInt 1) (CInt 1)) "TBool",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Equal (CInt 1) (CInt 2)) "TBool",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Equal (CInt 1) (ITE (CBool True) (CInt 2) (CInt 3))) "TBool",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Equal (Equal (CInt 1) (CInt 0)) (CInt 0)) "Type Error",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Equal (Equal (CInt 1) (CInt 2)) (CBool True)) "TBool",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Equal (Plus (CInt 1) (CInt 2)) (CBool True)) "Type Error",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Equal (Plus (CInt 1) (CInt 2)) (CInt 3)) "TBool",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ ITE (Abs "x" (Var "x")) (Abs "x" (Var "x")) (Abs "x" (Var "x"))) "Type Error",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ ITE (Abs "x" (Var "x")) (CBool True) (CBool True)) "Type Error",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ ITE (Abs "x" (Var "x")) (CInt 1) (CInt 2)) "Type Error",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ ITE (Abs "x" (Var "x")) (Abs "x" (Var "x")) (Abs "x" (Var "x"))) "Type Error",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ ITE (Abs "x" (Var "x")) (CBool True) (CBool True)) "Type Error",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ ITE (Abs "x" (Var "x")) (CInt 1) (CInt 2)) "Type Error",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ ITE (CBool True) (Abs "x" (Var "x")) (Abs "x" (Var "x"))) "TArr (TVar 1) (TVar 1)",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ ITE (CBool True) (Abs "x" (Var "x")) (Abs "x" (Var "x"))) "TArr (TVar 1) (TVar 1)",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ ITE (CBool True) (Abs "x" (Var "x")) (Abs "x" (Var "x"))) "TArr (TVar 1) (TVar 1)",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ ITE (CBool True) (CBool True) (Abs "x" (Var "x"))) "Type Error",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ ITE (CBool True) (CBool True) (CBool False)) "TBool",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ ITE (CBool True) (CInt 1) (Abs "x" (Var "x"))) "Type Error",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ ITE (CBool True) (CInt 1) (CBool True)) "Type Error",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ ITE (CBool True) (CInt 1) (CInt 2)) "TInt",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ ITE (CBool True) (Plus (CInt 1) (CInt 2)) (Minus (CInt 3) (CInt 4))) "TInt",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ ITE (CInt 0) (CInt 1) (CInt 2)) "Type Error",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ ITE (CInt 1) (Abs "x" (Var "x")) (Abs "x" (Var "x"))) "Type Error",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ ITE (CInt 1) (CBool True) (CBool True)) "Type Error",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ ITE (Equal (CInt 1) (CInt 1)) (Abs "x" (Var "x")) (Abs "x" (Var "x"))) "TArr (TVar 1) (TVar 1)",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ ITE (Equal (CInt 1) (CInt 1)) (Abs "x" (Var "x")) (Abs "x" (Var "x"))) "TArr (TVar 1) (TVar 1)",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ ITE (Equal (CInt 1) (CInt 1)) (CBool True) (CBool False)) "TBool",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ ITE (Equal (CInt 1) (CInt 1)) (CInt 1) (CInt 2)) "TInt",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ ITE (Equal (CInt 1) (CInt 1)) (Plus (CInt 1) (CInt 2)) (Minus (CInt 3) (CInt 4))) "TInt",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ ITE (Plus (CInt 0) (CInt 1)) (Abs "x" (Var "x")) (Abs "x" (Var "x"))) "Type Error",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ ITE (Plus (CInt 0) (CInt 1)) (CBool True) (CBool True)) "Type Error",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ ITE (Plus (CInt 0) (CInt 1)) (CInt 1) (CInt 2)) "Type Error",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ LetIn "f" (Abs "g" (App (Var "g") (CInt 1))) (App (Var "f") (Abs "x" (Var "x")))) "TInt",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ LetIn "f" (Abs "g" (App (Var "g") (CInt 1))) (Var "f")) "TArr (TArr TInt (TVar 1)) (TVar 1)",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ LetIn "f" (Abs "x" (Abs "y" (Var "x"))) (App (App (Var "f") (CInt 1)) (CBool True))) "TInt",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ LetIn "f" (Abs "x" (Abs "y" (Var "x"))) (App (Var "f") (CInt 1))) "TArr (TVar 1) TInt",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ LetIn "f" (Abs "x" (Var "x")) (App (Var "f") (CBool True))) "TBool",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ LetIn "f" (Abs "x" (ITE (Equal (Var "x") (CInt 0)) (CInt 0) (Plus (Var "x") (App (Var "f") (Minus (Var "x") (CInt 1)))))) (App (Var "f") (CInt 3))) "TInt",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ LetIn "f" (Abs "x" (ITE (Equal (Var "x") (CInt 0)) (CInt 1) (CInt 2))) (App (Var "f") (CInt 3))) "TInt",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ LetIn "f" (Abs "x" (Var "x")) (App (Var "f") (CBool True))) "TBool",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ LetIn "f" (Abs "x" (Var "x")) (App (Var "f") (CInt 1))) "TInt",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ LetIn "f" (Abs "x" (Var "x")) (App (Var "f") (Plus (CInt 1) (CInt 2)))) "TInt",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ LetIn "x" (CBool True) (Minus (Var "x") (CInt 1))) "Type Error",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ LetIn "x" (CBool True) (Var "x")) "TBool",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ LetIn "x" (CInt 1) (LetIn "y" (CBool True) (Plus (Var "x") (Var "y")))) "Type Error",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ LetIn "x" (CInt 1) (LetIn "y" (CBool True) (Var "x"))) "TInt",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ LetIn "x" (CInt 1) (LetIn "y" (CBool True) (Var "y"))) "TBool",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ LetIn "x" (CInt 1) (LetIn "y" (CBool True) (Var "x"))) "TInt",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ LetIn "x" (CInt 1) (LetIn "y" (CBool True) (Var "y"))) "TBool",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ LetIn "x" (CInt 1) (LetIn "y" (CInt 2) (Equal (Var "x") (Var "y")))) "TBool",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ LetIn "x" (CInt 1) (LetIn "y" (CInt 2) (Plus (Var "x") (Var "y")))) "TInt",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ LetIn "x" (CInt 1) (Var "x")) "TInt",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ LetIn "x" (CInt 2) (Minus (Var "x") (CInt 1))) "TInt",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Minus (CBool True) (CBool True)) "Type Error",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Minus (CBool True) (CInt 1)) "Type Error",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Minus (CInt 1) (CBool True)) "Type Error",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Minus (CInt 1) (CInt 2)) "TInt",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Minus (CInt 1) (ITE (CBool True) (CInt 2) (CInt 3))) "TInt",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Minus (CInt 1) (Minus (CInt 2) (CInt 3))) "TInt",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Minus (CInt 1) (Plus (CInt 2) (CInt 3))) "TInt",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Minus (Minus (CInt 1) (CInt 2)) (CInt 3)) "TInt",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Minus (Plus (CInt 1) (CInt 2)) (CInt 3)) "TInt",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Plus (CBool True) (CBool True)) "Type Error",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Plus (CBool True) (CInt 1)) "Type Error",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Plus (CInt 1) (CBool True)) "Type Error",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Plus (CInt 1) (CInt 2)) "TInt",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Plus (CInt 1) (ITE (CBool True) (CInt 2) (CInt 3))) "TInt",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Plus (CInt 1) (Minus (CInt 2) (CInt 3))) "TInt",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Plus (CInt 1) (Plus (CInt 2) (CInt 3))) "TInt",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Plus (Minus (CInt 1) (CInt 2)) (CInt 3)) "TInt",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Plus (Plus (CInt 1) (CInt 2)) (CInt 3)) "TInt",
      TestLabel "test1" $ TestCase $ assertEqual "test" (typeInfer $ Var "x1") "Type Error"
    ]

main :: IO ()
main = do
  count <- runTestTT tests
  if failures count > 0 then Exit.exitFailure else return ()
